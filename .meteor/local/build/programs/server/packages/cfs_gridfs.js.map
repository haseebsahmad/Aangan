{"version":3,"sources":["meteor://ðŸ’»app/packages/cfs:gridfs/gridfs.server.js"],"names":["path","Npm","require","mongodb","ObjectID","Grid","chunkSize","FS","Store","GridFS","name","options","self","gridfsName","mongoOptions","Error","mongoUrl","process","env","MONGO_URL","db","native_parser","server","auto_reconnect","StorageAdapter","typeName","fileKey","fileObj","key","_id","filename","info","_getInfo","updateFileRecordFirst","collectionName","createReadStream","gfs","settings","root","start","end","range","startPos","endPos","debug","console","log","createWriteStream","opts","mode","chunk_size","aliases","metadata","content_type","contentType","writeStream","on","file","emit","toString","size","length","storedAt","uploadDate","Date","error","remove","callback","err","watch","init","MongoClient","connect"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,IAAIA,IAAI,GAAGC,GAAG,CAACC,OAAJ,CAAY,MAAZ,CAAX;;AACA,IAAIC,OAAO,GAAGF,GAAG,CAACC,OAAJ,CAAY,SAAZ,CAAd;;AACA,IAAIE,QAAQ,GAAGH,GAAG,CAACC,OAAJ,CAAY,SAAZ,EAAuBE,QAAtC;;AACA,IAAIC,IAAI,GAAGJ,GAAG,CAACC,OAAJ,CAAY,eAAZ,CAAX,C,CACA;;;AAEA,IAAII,SAAS,GAAG,OAAK,IAAL,GAAU,CAA1B,C,CAA6B;;AAE7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAC,EAAE,CAACC,KAAH,CAASC,MAAT,GAAkB,UAASC,IAAT,EAAeC,OAAf,EAAwB;AACxC,MAAIC,IAAI,GAAG,IAAX;AACAD,SAAO,GAAGA,OAAO,IAAI,EAArB;AAEA,MAAIE,UAAU,GAAGH,IAAjB;AACA,MAAII,YAAY,GAAGH,OAAO,CAACG,YAAR,IAAwB,EAA3C;AAEA,MAAI,EAAEF,IAAI,YAAYL,EAAE,CAACC,KAAH,CAASC,MAA3B,CAAJ,EACE,MAAM,IAAIM,KAAJ,CAAU,uCAAV,CAAN;;AAEF,MAAI,CAACJ,OAAO,CAACK,QAAb,EAAuB;AACrBL,WAAO,CAACK,QAAR,GAAmBC,OAAO,CAACC,GAAR,CAAYC,SAA/B,CADqB,CAErB;;AACAN,cAAU,GAAG,gBAAgBH,IAA7B;AACD;;AAED,MAAI,CAACC,OAAO,CAACG,YAAb,EAA2B;AACzBH,WAAO,CAACG,YAAR,GAAuB;AAAEM,QAAE,EAAE;AAAEC,qBAAa,EAAE;AAAjB,OAAN;AAA+BC,YAAM,EAAE;AAAEC,sBAAc,EAAE;AAAlB;AAAvC,KAAvB;AACD;;AAED,MAAIZ,OAAO,CAACL,SAAZ,EAAuB;AACrBA,aAAS,GAAGK,OAAO,CAACL,SAApB;AACD;;AAED,SAAO,IAAIC,EAAE,CAACiB,cAAP,CAAsBd,IAAtB,EAA4BC,OAA5B,EAAqC;AAE1Cc,YAAQ,EAAE,gBAFgC;AAG1CC,WAAO,EAAE,UAASC,OAAT,EAAkB;AACzB;AACA;AACA,UAAIC,GAAG,GAAG;AACRC,WAAG,EAAE,IADG;AAERC,gBAAQ,EAAE;AAFF,OAAV,CAHyB,CAQzB;;AACA,UAAIH,OAAJ,EAAa;AACX,YAAII,IAAI,GAAGJ,OAAO,CAACK,QAAR,CAAiBtB,IAAjB,EAAuB;AAACuB,+BAAqB,EAAE;AAAxB,SAAvB,CAAX;;AACAL,WAAG,CAACC,GAAJ,GAAUE,IAAI,CAACH,GAAL,IAAY,IAAtB;AACAA,WAAG,CAACE,QAAJ,GAAeC,IAAI,CAACrB,IAAL,IAAaiB,OAAO,CAACjB,IAAR,CAAa;AAACuB,+BAAqB,EAAE;AAAxB,SAAb,CAAb,IAA8DN,OAAO,CAACO,cAAR,GAAyB,GAAzB,GAA+BP,OAAO,CAACE,GAApH;AACD,OAbwB,CAezB;;;AACA,aAAOD,GAAP;AACD,KApByC;AAqB1CO,oBAAgB,EAAE,UAAST,OAAT,EAAkBf,OAAlB,EAA2B;AAC3CA,aAAO,GAAGA,OAAO,IAAI,EAArB,CAD2C,CAG3C;;AACA,UAAIyB,GAAG,GAAG,IAAI/B,IAAJ,CAASO,IAAI,CAACQ,EAAd,EAAkBjB,OAAlB,CAAV,CAJ2C,CAM3C;;AACA,UAAIkC,QAAQ,GAAG;AACbR,WAAG,EAAE,IAAIzB,QAAJ,CAAasB,OAAO,CAACG,GAArB,CADQ;AAEbS,YAAI,EAAEzB;AAFO,OAAf,CAP2C,CAY3C;;AACA,UAAI,OAAOF,OAAO,CAAC4B,KAAf,KAAyB,WAAzB,IAAwC,OAAO5B,OAAO,CAAC6B,GAAf,KAAuB,WAAnE,EAAiF;AAC/E;AACAH,gBAAQ,CAACI,KAAT,GAAiB;AACfC,kBAAQ,EAAE/B,OAAO,CAAC4B,KADH;AAEfI,gBAAM,EAAEhC,OAAO,CAAC6B;AAFD,SAAjB;AAID;;AAEDjC,QAAE,CAACqC,KAAH,IAAYC,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBT,QAAtB,CAAZ;AAEA,aAAOD,GAAG,CAACD,gBAAJ,CAAqBE,QAArB,CAAP;AAED,KA9CyC;AA+C1CU,qBAAiB,EAAE,UAASrB,OAAT,EAAkBf,OAAlB,EAA2B;AAC5CA,aAAO,GAAGA,OAAO,IAAI,EAArB,CAD4C,CAG5C;;AACA,UAAIyB,GAAG,GAAG,IAAI/B,IAAJ,CAASO,IAAI,CAACQ,EAAd,EAAkBjB,OAAlB,CAAV;AAEA,UAAI6C,IAAI,GAAG;AACTlB,gBAAQ,EAAEJ,OAAO,CAACI,QADT;AAETmB,YAAI,EAAE,GAFG;AAGTX,YAAI,EAAEzB,UAHG;AAITqC,kBAAU,EAAEvC,OAAO,CAACuC,UAAR,IAAsB5C,SAJzB;AAKT;AACA;AACA6C,eAAO,EAAExC,OAAO,CAACwC,OAAR,IAAmB,EAPnB;AAQTC,gBAAQ,EAAEzC,OAAO,CAACyC,QAAR,IAAoB,IARrB;AASTC,oBAAY,EAAE1C,OAAO,CAAC2C,WAAR,IAAuB;AAT5B,OAAX;;AAYA,UAAI5B,OAAO,CAACG,GAAZ,EAAiB;AACfmB,YAAI,CAACnB,GAAL,GAAW,IAAIzB,QAAJ,CAAasB,OAAO,CAACG,GAArB,CAAX;AACD;;AAED,UAAI0B,WAAW,GAAGnB,GAAG,CAACW,iBAAJ,CAAsBC,IAAtB,CAAlB;AAEAO,iBAAW,CAACC,EAAZ,CAAe,OAAf,EAAwB,UAASC,IAAT,EAAe;AACrC,YAAI,CAACA,IAAL,EAAW;AACT;AACA;AACA;AACA;AACD;;AAED,YAAIlD,EAAE,CAACqC,KAAP,EAAcC,OAAO,CAACC,GAAR,CAAY,mBAAZ,EARuB,CAUrC;;AACAS,mBAAW,CAACG,IAAZ,CAAiB,QAAjB,EAA2B;AACzB;AACA;AACA;AACA;AACA;AACAhC,iBAAO,EAAE+B,IAAI,CAAC5B,GAAL,CAAS8B,QAAT,EANgB;AAOzBC,cAAI,EAAEH,IAAI,CAACI,MAPc;AAQzBC,kBAAQ,EAAEL,IAAI,CAACM,UAAL,IAAmB,IAAIC,IAAJ;AARJ,SAA3B;AAUD,OArBD;AAuBAT,iBAAW,CAACC,EAAZ,CAAe,OAAf,EAAwB,UAASS,KAAT,EAAgB;AACtCpB,eAAO,CAACC,GAAR,CAAY,oBAAZ,EAAkCmB,KAAlC;AACD,OAFD;AAIA,aAAOV,WAAP;AAED,KApGyC;AAqG1CW,UAAM,EAAE,UAASxC,OAAT,EAAkByC,QAAlB,EAA4B;AAClC;AACA,UAAI/B,GAAG,GAAG,IAAI/B,IAAJ,CAASO,IAAI,CAACQ,EAAd,EAAkBjB,OAAlB,CAAV;;AAEA,UAAI;AACFiC,WAAG,CAAC8B,MAAJ,CAAW;AAAErC,aAAG,EAAE,IAAIzB,QAAJ,CAAasB,OAAO,CAACG,GAArB,CAAP;AAAkCS,cAAI,EAAEzB;AAAxC,SAAX,EAAiEsD,QAAjE;AACD,OAFD,CAEE,OAAMC,GAAN,EAAW;AACXD,gBAAQ,CAACC,GAAD,CAAR;AACD;AACF,KA9GyC;AAgH1C;AACAC,SAAK,EAAE,YAAW;AAChB,YAAM,IAAItD,KAAJ,CAAU,yDAAV,CAAN;AACD,KAnHyC;AAqH1CuD,QAAI,EAAE,UAASH,QAAT,EAAmB;AACvBhE,aAAO,CAACoE,WAAR,CAAoBC,OAApB,CAA4B7D,OAAO,CAACK,QAApC,EAA8CF,YAA9C,EAA4D,UAAUsD,GAAV,EAAehD,EAAf,EAAmB;AAC7E,YAAIgD,GAAJ,EAAS;AAAE,iBAAOD,QAAQ,CAACC,GAAD,CAAf;AAAuB;;AAClCxD,YAAI,CAACQ,EAAL,GAAUA,EAAV;AACA+C,gBAAQ,CAAC,IAAD,CAAR;AACD,OAJD;AAKD;AA3HyC,GAArC,CAAP;AA6HD,CArJD,C","file":"/packages/cfs_gridfs.js","sourcesContent":["var path = Npm.require('path');\nvar mongodb = Npm.require('mongodb');\nvar ObjectID = Npm.require('mongodb').ObjectID;\nvar Grid = Npm.require('gridfs-stream');\n//var Grid = Npm.require('gridfs-locking-stream');\n\nvar chunkSize = 1024*1024*2; // 256k is default GridFS chunk size, but performs terribly for largish files\n\n/**\n * @public\n * @constructor\n * @param {String} name - The store name\n * @param {Object} options\n * @param {Function} [options.beforeSave] - Function to run before saving a file from the server. The context of the function will be the `FS.File` instance we're saving. The function may alter its properties.\n * @param {Number} [options.maxTries=5] - Max times to attempt saving a file\n * @returns {FS.StorageAdapter} An instance of FS.StorageAdapter.\n *\n * Creates a GridFS store instance on the server. Inherits from FS.StorageAdapter\n * type.\n */\n\nFS.Store.GridFS = function(name, options) {\n  var self = this;\n  options = options || {};\n\n  var gridfsName = name;\n  var mongoOptions = options.mongoOptions || {};\n\n  if (!(self instanceof FS.Store.GridFS))\n    throw new Error('FS.Store.GridFS missing keyword \"new\"');\n\n  if (!options.mongoUrl) {\n    options.mongoUrl = process.env.MONGO_URL;\n    // When using a Meteor MongoDB instance, preface name with \"cfs_gridfs.\"\n    gridfsName = \"cfs_gridfs.\" + name;\n  }\n\n  if (!options.mongoOptions) {\n    options.mongoOptions = { db: { native_parser: true }, server: { auto_reconnect: true }};\n  }\n\n  if (options.chunkSize) {\n    chunkSize = options.chunkSize;\n  }\n\n  return new FS.StorageAdapter(name, options, {\n\n    typeName: 'storage.gridfs',\n    fileKey: function(fileObj) {\n      // We should not have to mount the file here - We assume its taken\n      // care of - Otherwise we create new files instead of overwriting\n      var key = {\n        _id: null,\n        filename: null\n      };\n\n      // If we're passed a fileObj, we retrieve the _id and filename from it.\n      if (fileObj) {\n        var info = fileObj._getInfo(name, {updateFileRecordFirst: false});\n        key._id = info.key || null;\n        key.filename = info.name || fileObj.name({updateFileRecordFirst: false}) || (fileObj.collectionName + '-' + fileObj._id);\n      }\n\n      // If key._id is null at this point, createWriteStream will let GridFS generate a new ID\n      return key;\n    },\n    createReadStream: function(fileKey, options) {\n      options = options || {};\n\n      // Init GridFS\n      var gfs = new Grid(self.db, mongodb);\n\n      // Set the default streamning settings\n      var settings = {\n        _id: new ObjectID(fileKey._id),\n        root: gridfsName\n      };\n\n      // Check if this should be a partial read\n      if (typeof options.start !== 'undefined' && typeof options.end !== 'undefined' ) {\n        // Add partial info\n        settings.range = {\n          startPos: options.start,\n          endPos: options.end\n        };\n      }\n\n      FS.debug && console.log('GRIDFS', settings);\n\n      return gfs.createReadStream(settings);\n\n    },\n    createWriteStream: function(fileKey, options) {\n      options = options || {};\n\n      // Init GridFS\n      var gfs = new Grid(self.db, mongodb);\n\n      var opts = {\n        filename: fileKey.filename,\n        mode: 'w',\n        root: gridfsName,\n        chunk_size: options.chunk_size || chunkSize,\n        // We allow aliases, metadata and contentType to be passed in via\n        // options\n        aliases: options.aliases || [],\n        metadata: options.metadata || null,\n        content_type: options.contentType || 'application/octet-stream'\n      };\n\n      if (fileKey._id) {\n        opts._id = new ObjectID(fileKey._id);\n      }\n\n      var writeStream = gfs.createWriteStream(opts);\n\n      writeStream.on('close', function(file) {\n        if (!file) {\n          // gridfs-stream will emit \"close\" without passing a file\n          // if there is an error. We can simply exit here because\n          // the \"error\" listener will also be called in this case.\n          return;\n        }\n\n        if (FS.debug) console.log('SA GridFS - DONE!');\n\n        // Emit end and return the fileKey, size, and updated date\n        writeStream.emit('stored', {\n          // Set the generated _id so that we know it for future reads and writes.\n          // We store the _id as a string and only convert to ObjectID right before\n          // reading, writing, or deleting. If we store the ObjectID itself,\n          // Meteor (EJSON?) seems to convert it to a LocalCollection.ObjectID,\n          // which GFS doesn't understand.\n          fileKey: file._id.toString(),\n          size: file.length,\n          storedAt: file.uploadDate || new Date()\n        });\n      });\n\n      writeStream.on('error', function(error) {\n        console.log('SA GridFS - ERROR!', error);\n      });\n\n      return writeStream;\n\n    },\n    remove: function(fileKey, callback) {\n      // Init GridFS\n      var gfs = new Grid(self.db, mongodb);\n\n      try {\n        gfs.remove({ _id: new ObjectID(fileKey._id), root: gridfsName }, callback);\n      } catch(err) {\n        callback(err);\n      }\n    },\n\n    // Not implemented\n    watch: function() {\n      throw new Error(\"GridFS storage adapter does not support the sync option\");\n    },\n\n    init: function(callback) {\n      mongodb.MongoClient.connect(options.mongoUrl, mongoOptions, function (err, db) {\n        if (err) { return callback(err); }\n        self.db = db;\n        callback(null);\n      });\n    }\n  });\n};\n"]}