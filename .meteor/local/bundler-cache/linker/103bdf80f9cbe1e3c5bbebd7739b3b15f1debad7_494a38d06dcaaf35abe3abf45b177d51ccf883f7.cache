[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar FS = Package['cfs:base-package'].FS;\nvar meteorInstall = Package.modules.meteorInstall;\nvar Promise = Package.promise.Promise;\n\nvar require = meteorInstall({\"node_modules\":{\"meteor\":{\"cfs:gridfs\":{\"gridfs.client.js\":function module(){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                  //\n// packages/cfs_gridfs/gridfs.client.js                                                             //\n//                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                    //\n/**\n * @public\n * @constructor\n * @param {String} name - The store name\n * @param {Object} options\n * @param {Function} [options.beforeSave] - Function to run before saving a file from the client. The context of the function will be the `FS.File` instance we're saving. The function may alter its properties.\n * @param {Number} [options.maxTries=5] - Max times to attempt saving a file\n * @returns {undefined}\n *\n * Creates a GridFS store instance on the client, which is just a shell object\n * storing some info.\n */\nFS.Store.GridFS = function (name, options) {\n  var self = this;\n  if (!(self instanceof FS.Store.GridFS)) throw new Error('FS.Store.GridFS missing keyword \"new\"');\n  return new FS.StorageAdapter(name, options, {\n    typeName: 'storage.gridfs'\n  });\n};\n//////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}}}},{\n  \"extensions\": [\n    \".js\",\n    \".json\"\n  ]\n});\n\nrequire(\"/node_modules/meteor/cfs:gridfs/gridfs.client.js\");\n\n/* Exports */\nPackage._define(\"cfs:gridfs\");\n\n})();\n","servePath":"/packages/cfs_gridfs.js","sourceMap":{"version":3,"sources":["packages/cfs:gridfs/gridfs.client.js"],"names":["FS","Store","GridFS","name","options","self","Error","StorageAdapter","typeName"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAA,EAAE,CAACC,KAAH,CAASC,MAAT,GAAkB,UAASC,IAAT,EAAeC,OAAf,EAAwB;AACxC,MAAIC,IAAI,GAAG,IAAX;AACA,MAAI,EAAEA,IAAI,YAAYL,EAAE,CAACC,KAAH,CAASC,MAA3B,CAAJ,EACE,MAAM,IAAII,KAAJ,CAAU,uCAAV,CAAN;AAEF,SAAO,IAAIN,EAAE,CAACO,cAAP,CAAsBJ,IAAtB,EAA4BC,OAA5B,EAAqC;AAC1CI,YAAQ,EAAE;AADgC,GAArC,CAAP;AAGD,CARD,C","file":"/packages/cfs_gridfs.js","sourcesContent":["/**\n * @public\n * @constructor\n * @param {String} name - The store name\n * @param {Object} options\n * @param {Function} [options.beforeSave] - Function to run before saving a file from the client. The context of the function will be the `FS.File` instance we're saving. The function may alter its properties.\n * @param {Number} [options.maxTries=5] - Max times to attempt saving a file\n * @returns {undefined}\n *\n * Creates a GridFS store instance on the client, which is just a shell object\n * storing some info.\n */\nFS.Store.GridFS = function(name, options) {\n  var self = this;\n  if (!(self instanceof FS.Store.GridFS))\n    throw new Error('FS.Store.GridFS missing keyword \"new\"');\n\n  return new FS.StorageAdapter(name, options, {\n    typeName: 'storage.gridfs'\n  });\n};\n"]}}]