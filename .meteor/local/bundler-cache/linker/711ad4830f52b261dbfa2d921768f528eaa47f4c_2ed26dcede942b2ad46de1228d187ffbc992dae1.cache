[{"type":"js","data":"(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar FS = Package['cfs:base-package'].FS;\n\n/* Package-scope variables */\nvar AWS;\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                 //\n// packages/cfs_s3/packages/cfs_s3.js                                                                              //\n//                                                                                                                 //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                   //\n(function () {\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                          //\n// packages/cfs:s3/s3.server.js                                                                             //\n//                                                                                                          //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                            //\n// We use the official aws sdk                                                                              // 1\nAWS = Npm.require('aws-sdk');                                                                               // 2\n                                                                                                            // 3\nvar validS3ServiceParamKeys = [                                                                             // 4\n  'endpoint',                                                                                               // 5\n  'accessKeyId',                                                                                            // 6\n  'secretAccessKey',                                                                                        // 7\n  'sessionToken',                                                                                           // 8\n  'credentials',                                                                                            // 9\n  'credentialProvider',                                                                                     // 10\n  'region',                                                                                                 // 11\n  'maxRetries',                                                                                             // 12\n  'maxRedirects',                                                                                           // 13\n  'sslEnabled',                                                                                             // 14\n  'paramValidation',                                                                                        // 15\n  'computeChecksums',                                                                                       // 16\n  's3ForcePathStyle',                                                                                       // 17\n  'httpOptions',                                                                                            // 18\n  'apiVersion',                                                                                             // 19\n  'apiVersions',                                                                                            // 20\n  'logger',                                                                                                 // 21\n  'signatureVersion'                                                                                        // 22\n];                                                                                                          // 23\nvar validS3PutParamKeys = [                                                                                 // 24\n  'ACL',                                                                                                    // 25\n  'Body',                                                                                                   // 26\n  'Bucket',                                                                                                 // 27\n  'CacheControl',                                                                                           // 28\n  'ContentDisposition',                                                                                     // 29\n  'ContentEncoding',                                                                                        // 30\n  'ContentLanguage',                                                                                        // 31\n  'ContentLength',                                                                                          // 32\n  'ContentMD5',                                                                                             // 33\n  'ContentType',                                                                                            // 34\n  'Expires',                                                                                                // 35\n  'GrantFullControl',                                                                                       // 36\n  'GrantRead',                                                                                              // 37\n  'GrantReadACP',                                                                                           // 38\n  'GrantWriteACP',                                                                                          // 39\n  'Key',                                                                                                    // 40\n  'Metadata',                                                                                               // 41\n  'ServerSideEncryption',                                                                                   // 42\n  'StorageClass',                                                                                           // 43\n  'WebsiteRedirectLocation'                                                                                 // 44\n];                                                                                                          // 45\n                                                                                                            // 46\n/**                                                                                                         // 47\n * @public                                                                                                  // 48\n * @constructor                                                                                             // 49\n * @param {String} name - The store name                                                                    // 50\n * @param {Object} options                                                                                  // 51\n * @param {String} options.region - Bucket region                                                           // 52\n * @param {String} options.bucket - Bucket name                                                             // 53\n * @param {String} [options.accessKeyId] - AWS IAM key; required if not set in environment variables        // 54\n * @param {String} [options.secretAccessKey] - AWS IAM secret; required if not set in environment variables // 55\n * @param {String} [options.ACL='private'] - ACL for objects when putting                                   // 56\n * @param {String} [options.folder='/'] - Which folder (key prefix) in the bucket to use                    // 57\n * @param {Function} [options.beforeSave] - Function to run before saving a file from the server. The context of the function will be the `FS.File` instance we're saving. The function may alter its properties.\n * @param {Number} [options.maxTries=5] - Max times to attempt saving a file                                // 59\n * @returns {FS.StorageAdapter} An instance of FS.StorageAdapter.                                           // 60\n *                                                                                                          // 61\n * Creates an S3 store instance on the server. Inherits from FS.StorageAdapter                              // 62\n * type.                                                                                                    // 63\n */                                                                                                         // 64\nFS.Store.S3 = function(name, options) {                                                                     // 65\n  var self = this;                                                                                          // 66\n  if (!(self instanceof FS.Store.S3))                                                                       // 67\n    throw new Error('FS.Store.S3 missing keyword \"new\"');                                                   // 68\n                                                                                                            // 69\n  options = options || {};                                                                                  // 70\n                                                                                                            // 71\n  // Determine which folder (key prefix) in the bucket to use                                               // 72\n  var folder = options.folder;                                                                              // 73\n  if (typeof folder === \"string\" && folder.length) {                                                        // 74\n    if (folder.slice(0, 1) === \"/\") {                                                                       // 75\n      folder = folder.slice(1);                                                                             // 76\n    }                                                                                                       // 77\n    if (folder.slice(-1) !== \"/\") {                                                                         // 78\n      folder += \"/\";                                                                                        // 79\n    }                                                                                                       // 80\n  } else {                                                                                                  // 81\n    folder = \"\";                                                                                            // 82\n  }                                                                                                         // 83\n                                                                                                            // 84\n  var bucket = options.bucket;                                                                              // 85\n  if (!bucket)                                                                                              // 86\n    throw new Error('FS.Store.S3 you must specify the \"bucket\" option');                                    // 87\n                                                                                                            // 88\n  var defaultAcl = options.ACL || 'private';                                                                // 89\n                                                                                                            // 90\n  // Remove serviceParams from SA options                                                                   // 91\n // options = _.omit(options, validS3ServiceParamKeys);                                                     // 92\n                                                                                                            // 93\n  var serviceParams = FS.Utility.extend({                                                                   // 94\n    Bucket: bucket,                                                                                         // 95\n    region: null, //required                                                                                // 96\n    accessKeyId: null, //required                                                                           // 97\n    secretAccessKey: null, //required                                                                       // 98\n    ACL: defaultAcl                                                                                         // 99\n  }, options);                                                                                              // 100\n                                                                                                            // 101\n  // Whitelist serviceParams, else aws-sdk throws an error                                                  // 102\n  // XXX: I've commented this at the moment... It stopped things from working                               // 103\n  // we have to check up on this                                                                            // 104\n  // serviceParams = _.pick(serviceParams, validS3ServiceParamKeys);                                        // 105\n                                                                                                            // 106\n  // Create S3 service                                                                                      // 107\n  var S3 = new AWS.S3(serviceParams);                                                                       // 108\n                                                                                                            // 109\n  return new FS.StorageAdapter(name, options, {                                                             // 110\n    typeName: 'storage.s3',                                                                                 // 111\n    fileKey: function(fileObj) {                                                                            // 112\n      // Lookup the copy                                                                                    // 113\n      var info = fileObj && fileObj._getInfo(name);                                                         // 114\n      // If the store and key is found return the key                                                       // 115\n      if (info && info.key) return info.key;                                                                // 116\n                                                                                                            // 117\n      var filename = fileObj.name();                                                                        // 118\n      var filenameInStore = fileObj.name({store: name});                                                    // 119\n                                                                                                            // 120\n      // If no store key found we resolve / generate a key                                                  // 121\n      return fileObj.collectionName + '/' + fileObj._id + '-' + (filenameInStore || filename);              // 122\n    },                                                                                                      // 123\n    createReadStream: function(fileKey, options) {                                                          // 124\n                                                                                                            // 125\n      return S3.createReadStream({                                                                          // 126\n        Bucket: bucket,                                                                                     // 127\n        Key: folder + fileKey                                                                               // 128\n      });                                                                                                   // 129\n                                                                                                            // 130\n    },                                                                                                      // 131\n    // Comment to documentation: Set options.ContentLength otherwise the                                    // 132\n    // indirect stream will be used creating extra overhead on the filesystem.                              // 133\n    // An easy way if the data is not transformed is to set the                                             // 134\n    // options.ContentLength = fileObj.size ...                                                             // 135\n    createWriteStream: function(fileKey, options) {                                                         // 136\n      options = options || {};                                                                              // 137\n                                                                                                            // 138\n      if (options.contentType) {                                                                            // 139\n        options.ContentType = options.contentType;                                                          // 140\n      }                                                                                                     // 141\n                                                                                                            // 142\n      // We dont support array of aliases                                                                   // 143\n      delete options.aliases;                                                                               // 144\n      // We dont support contentType                                                                        // 145\n      delete options.contentType;                                                                           // 146\n      // We dont support metadata use Metadata?                                                             // 147\n      delete options.metadata;                                                                              // 148\n                                                                                                            // 149\n      // Set options                                                                                        // 150\n      var options = FS.Utility.extend({                                                                     // 151\n        Bucket: bucket,                                                                                     // 152\n        Key: folder + fileKey,                                                                              // 153\n        fileKey: fileKey,                                                                                   // 154\n        ACL: defaultAcl                                                                                     // 155\n      }, options);                                                                                          // 156\n                                                                                                            // 157\n      return S3.createWriteStream(options);                                                                 // 158\n    },                                                                                                      // 159\n    remove: function(fileKey, callback) {                                                                   // 160\n                                                                                                            // 161\n      S3.deleteObject({                                                                                     // 162\n        Bucket: bucket,                                                                                     // 163\n        Key: folder + fileKey                                                                               // 164\n      }, function(error) {                                                                                  // 165\n        callback(error, !error);                                                                            // 166\n      });                                                                                                   // 167\n    },                                                                                                      // 168\n    watch: function() {                                                                                     // 169\n      throw new Error(\"S3 storage adapter does not support the sync option\");                               // 170\n    }                                                                                                       // 171\n  });                                                                                                       // 172\n};                                                                                                          // 173\n                                                                                                            // 174\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                          //\n// packages/cfs:s3/s3.upload.stream2.js                                                                     //\n//                                                                                                          //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                            //\nvar Writable = Npm.require('stream').Writable;                                                              // 1\n                                                                                                            // 2\n// This is based on the code from                                                                           // 3\n// https://github.com/nathanpeck/s3-upload-stream/blob/master/lib/s3-upload-stream.js                       // 4\n// But much is rewritten and adapted to cfs                                                                 // 5\n                                                                                                            // 6\nAWS.S3.prototype.createReadStream = function(params, options) {                                             // 7\n  // Simple wrapper                                                                                         // 8\n  return this.getObject(params).createReadStream();                                                         // 9\n};                                                                                                          // 10\n                                                                                                            // 11\n// Extend the AWS.S3 API                                                                                    // 12\nAWS.S3.prototype.createWriteStream = function(params, options) {                                            // 13\n  var self = this;                                                                                          // 14\n                                                                                                            // 15\n  //Create the writeable stream interface.                                                                  // 16\n  var writeStream = Writable({                                                                              // 17\n    highWaterMark: 4194304 // 4 MB                                                                          // 18\n  });                                                                                                       // 19\n                                                                                                            // 20\n  var partNumber = 1;                                                                                       // 21\n  var parts = [];                                                                                           // 22\n  var receivedSize = 0;                                                                                     // 23\n  var uploadedSize = 0;                                                                                     // 24\n  var currentChunk = Buffer(0);                                                                             // 25\n  var maxChunkSize = 5242880;                                                                               // 26\n  var multipartUploadID = null;                                                                             // 27\n  var waitingCallback;                                                                                      // 28\n  var fileKey = params && (params.fileKey || params.Key);                                                   // 29\n                                                                                                            // 30\n  // Clean up for AWS sdk                                                                                   // 31\n  delete params.fileKey;                                                                                    // 32\n                                                                                                            // 33\n  // This small function stops the write stream until we have connected with                                // 34\n  // the s3 server                                                                                          // 35\n  var runWhenReady = function(callback) {                                                                   // 36\n    // If we dont have a upload id we are not ready                                                         // 37\n    if (multipartUploadID === null) {                                                                       // 38\n      // We set the waiting callback                                                                        // 39\n      waitingCallback = callback;                                                                           // 40\n    } else {                                                                                                // 41\n      // No problem - just continue                                                                         // 42\n      callback();                                                                                           // 43\n    }                                                                                                       // 44\n  };                                                                                                        // 45\n                                                                                                            // 46\n  //Handler to receive data and upload it to S3.                                                            // 47\n  writeStream._write = function (chunk, enc, next) {                                                        // 48\n    currentChunk = Buffer.concat([currentChunk, chunk]);                                                    // 49\n                                                                                                            // 50\n    // If the current chunk buffer is getting to large, or the stream piped in                              // 51\n    // has ended then flush the chunk buffer downstream to S3 via the multipart                             // 52\n    // upload API.                                                                                          // 53\n    if(currentChunk.length > maxChunkSize) {                                                                // 54\n      // Make sure we only run when the s3 upload is ready                                                  // 55\n      runWhenReady(function() { flushChunk(next, false); });                                                // 56\n    } else {                                                                                                // 57\n      // We dont have to contact s3 for this                                                                // 58\n      runWhenReady(next);                                                                                   // 59\n    }                                                                                                       // 60\n  };                                                                                                        // 61\n                                                                                                            // 62\n  // Overwrite the end method so that we can hijack it to flush the last part                               // 63\n  // and then complete the multipart upload                                                                 // 64\n  var _originalEnd = writeStream.end;                                                                       // 65\n  writeStream.end = function (chunk, encoding, callback) {                                                  // 66\n    // Call the super                                                                                       // 67\n    _originalEnd.call(this, chunk, encoding, function () {                                                  // 68\n      // Make sure we only run when the s3 upload is ready                                                  // 69\n      runWhenReady(function() { flushChunk(callback, true); });                                             // 70\n    });                                                                                                     // 71\n  };                                                                                                        // 72\n                                                                                                            // 73\n  writeStream.on('error', function () {                                                                     // 74\n    if (multipartUploadID) {                                                                                // 75\n      if (FS.debug) {                                                                                       // 76\n        console.log('SA S3 - ERROR!!');                                                                     // 77\n      }                                                                                                     // 78\n      self.abortMultipartUpload({                                                                           // 79\n        Bucket: params.Bucket,                                                                              // 80\n        Key: params.Key,                                                                                    // 81\n        UploadId: multipartUploadID                                                                         // 82\n      }, function (err) {                                                                                   // 83\n        if(err) {                                                                                           // 84\n          console.error('SA S3 - Could not abort multipart upload', err)                                    // 85\n        }                                                                                                   // 86\n      });                                                                                                   // 87\n    }                                                                                                       // 88\n  });                                                                                                       // 89\n                                                                                                            // 90\n  var flushChunk = function (callback, lastChunk) {                                                         // 91\n    if (multipartUploadID === null) {                                                                       // 92\n      throw new Error('Internal error multipartUploadID is null');                                          // 93\n    }                                                                                                       // 94\n    // Get the chunk data                                                                                   // 95\n    var uploadingChunk = Buffer(currentChunk.length);                                                       // 96\n    currentChunk.copy(uploadingChunk);                                                                      // 97\n                                                                                                            // 98\n                                                                                                            // 99\n    // Store the current part number and then increase the counter                                          // 100\n    var localChunkNumber = partNumber++;                                                                    // 101\n                                                                                                            // 102\n    // We add the size of data                                                                              // 103\n    receivedSize += uploadingChunk.length;                                                                  // 104\n                                                                                                            // 105\n    // Upload the part                                                                                      // 106\n    self.uploadPart({                                                                                       // 107\n      Body: uploadingChunk,                                                                                 // 108\n      Bucket: params.Bucket,                                                                                // 109\n      Key: params.Key,                                                                                      // 110\n      UploadId: multipartUploadID,                                                                          // 111\n      PartNumber: localChunkNumber                                                                          // 112\n    }, function (err, result) {                                                                             // 113\n      // Call the next data                                                                                 // 114\n      if(typeof callback === 'function') {                                                                  // 115\n        callback();                                                                                         // 116\n      }                                                                                                     // 117\n                                                                                                            // 118\n      if(err) {                                                                                             // 119\n        writeStream.emit('error', err);                                                                     // 120\n      } else {                                                                                              // 121\n        // Increase the upload size                                                                         // 122\n        uploadedSize += uploadingChunk.length;                                                              // 123\n        parts[localChunkNumber-1] = {                                                                       // 124\n          ETag: result.ETag,                                                                                // 125\n          PartNumber: localChunkNumber                                                                      // 126\n        };                                                                                                  // 127\n                                                                                                            // 128\n        // XXX: event for debugging                                                                         // 129\n        writeStream.emit('chunk', {                                                                         // 130\n          ETag: result.ETag,                                                                                // 131\n          PartNumber: localChunkNumber,                                                                     // 132\n          receivedSize: receivedSize,                                                                       // 133\n          uploadedSize: uploadedSize                                                                        // 134\n        });                                                                                                 // 135\n                                                                                                            // 136\n        // The incoming stream has finished giving us all data and we have                                  // 137\n        // finished uploading all that data to S3. So tell S3 to assemble those                             // 138\n        // parts we uploaded into the final product.                                                        // 139\n        if(writeStream._writableState.ended === true &&                                                     // 140\n                uploadedSize === receivedSize && lastChunk) {                                               // 141\n          // Complete the upload                                                                            // 142\n          self.completeMultipartUpload({                                                                    // 143\n            Bucket: params.Bucket,                                                                          // 144\n            Key: params.Key,                                                                                // 145\n            UploadId: multipartUploadID,                                                                    // 146\n            MultipartUpload: {                                                                              // 147\n              Parts: parts                                                                                  // 148\n            }                                                                                               // 149\n          }, function (err, result) {                                                                       // 150\n            if(err) {                                                                                       // 151\n              writeStream.emit('error', err);                                                               // 152\n            } else {                                                                                        // 153\n              // Emit the cfs end event for uploads                                                         // 154\n              if (FS.debug) {                                                                               // 155\n                console.log('SA S3 - DONE!!');                                                              // 156\n              }                                                                                             // 157\n              writeStream.emit('stored', {                                                                  // 158\n                fileKey: fileKey,                                                                           // 159\n                size: uploadedSize,                                                                         // 160\n                storedAt: new Date()                                                                        // 161\n              });                                                                                           // 162\n            }                                                                                               // 163\n                                                                                                            // 164\n          });                                                                                               // 165\n        }                                                                                                   // 166\n      }                                                                                                     // 167\n    });                                                                                                     // 168\n                                                                                                            // 169\n    // Reset the current buffer                                                                             // 170\n    currentChunk = Buffer(0);                                                                               // 171\n  };                                                                                                        // 172\n                                                                                                            // 173\n  //Use the S3 client to initialize a multipart upload to S3.                                               // 174\n  self.createMultipartUpload( params, function (err, data) {                                                // 175\n    if(err) {                                                                                               // 176\n      // Emit the error                                                                                     // 177\n      writeStream.emit('error', err);                                                                       // 178\n    } else {                                                                                                // 179\n      // Set the upload id                                                                                  // 180\n      multipartUploadID = data.UploadId;                                                                    // 181\n                                                                                                            // 182\n      // Call waiting callback                                                                              // 183\n      if (typeof waitingCallback === 'function') {                                                          // 184\n        // We call the waiting callback if any now since we established a                                   // 185\n        // connection to the s3                                                                             // 186\n        waitingCallback();                                                                                  // 187\n      }                                                                                                     // 188\n                                                                                                            // 189\n    }                                                                                                       // 190\n  });                                                                                                       // 191\n                                                                                                            // 192\n  // We return the write stream                                                                             // 193\n  return writeStream;                                                                                       // 194\n};                                                                                                          // 195\n                                                                                                            // 196\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nPackage._define(\"cfs:s3\");\n\n})();\n","servePath":"/packages/cfs_s3.js"}]