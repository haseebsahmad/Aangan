[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar check = Package.check.check;\nvar Match = Package.check.Match;\nvar URL = Package.url.URL;\nvar URLSearchParams = Package.url.URLSearchParams;\nvar Reload = Package.reload.Reload;\nvar Base64 = Package.base64.Base64;\nvar meteorInstall = Package.modules.meteorInstall;\nvar meteorBabelHelpers = Package.modules.meteorBabelHelpers;\nvar Promise = Package.promise.Promise;\nvar Symbol = Package['ecmascript-runtime-client'].Symbol;\nvar Map = Package['ecmascript-runtime-client'].Map;\nvar Set = Package['ecmascript-runtime-client'].Set;\n\n/* Package-scope variables */\nvar OAuth;\n\nvar require = meteorInstall({\"node_modules\":{\"meteor\":{\"oauth\":{\"oauth_client.js\":function module(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                         //\n// packages/oauth/oauth_client.js                                                                          //\n//                                                                                                         //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                           //\n// credentialToken -> credentialSecret. You must provide both the\n// credentialToken and the credentialSecret to retrieve an access token from\n// the _pendingCredentials collection.\nvar credentialSecrets = {};\nOAuth = {};\n\nOAuth.showPopup = function (url, callback, dimensions) {\n  throw new Error(\"OAuth.showPopup must be implemented on this arch.\");\n}; // Determine the login style (popup or redirect) for this login flow.\n//\n//\n\n\nOAuth._loginStyle = function (service, config, options) {\n  if (Meteor.isCordova) {\n    return \"popup\";\n  }\n\n  var loginStyle = options && options.loginStyle || config.loginStyle || 'popup';\n  if (![\"popup\", \"redirect\"].includes(loginStyle)) throw new Error(\"Invalid login style: \" + loginStyle); // If we don't have session storage (for example, Safari in private\n  // mode), the redirect login flow won't work, so fallback to the\n  // popup style.\n\n  if (loginStyle === 'redirect') {\n    try {\n      sessionStorage.setItem('Meteor.oauth.test', 'test');\n      sessionStorage.removeItem('Meteor.oauth.test');\n    } catch (e) {\n      loginStyle = 'popup';\n    }\n  }\n\n  return loginStyle;\n};\n\nOAuth._stateParam = function (loginStyle, credentialToken, redirectUrl) {\n  var _Meteor$settings, _Meteor$settings$publ, _Meteor$settings$publ2, _Meteor$settings$publ3;\n\n  var state = {\n    loginStyle: loginStyle,\n    credentialToken: credentialToken,\n    isCordova: Meteor.isCordova\n  };\n\n  if (loginStyle === 'redirect' || (_Meteor$settings = Meteor.settings) !== null && _Meteor$settings !== void 0 && (_Meteor$settings$publ = _Meteor$settings.public) !== null && _Meteor$settings$publ !== void 0 && (_Meteor$settings$publ2 = _Meteor$settings$publ.packages) !== null && _Meteor$settings$publ2 !== void 0 && (_Meteor$settings$publ3 = _Meteor$settings$publ2.oauth) !== null && _Meteor$settings$publ3 !== void 0 && _Meteor$settings$publ3.setRedirectUrlWhenLoginStyleIsPopup && loginStyle === 'popup') {\n    state.redirectUrl = redirectUrl || '' + window.location;\n  } // Encode base64 as not all login services URI-encode the state\n  // parameter when they pass it back to us.\n  // Use the 'base64' package here because 'btoa' isn't supported in IE8/9.\n\n\n  return Base64.encode(JSON.stringify(state));\n}; // At the beginning of the redirect login flow, before we redirect to\n// the login service, save the credential token for this login attempt\n// in the reload migration data.\n//\n\n\nOAuth.saveDataForRedirect = function (loginService, credentialToken) {\n  Reload._onMigrate('oauth', function () {\n    return [true, {\n      loginService: loginService,\n      credentialToken: credentialToken\n    }];\n  });\n\n  Reload._migrate(null, {\n    immediateMigration: true\n  });\n}; // At the end of the redirect login flow, when we've redirected back\n// to the application, retrieve the credentialToken and (if the login\n// was successful) the credentialSecret.\n//\n// Called at application startup.  Returns null if this is normal\n// application startup and we weren't just redirected at the end of\n// the login flow.\n//\n\n\nOAuth.getDataAfterRedirect = function () {\n  var migrationData = Reload._migrationData('oauth');\n\n  if (!(migrationData && migrationData.credentialToken)) return null;\n  var credentialToken = migrationData.credentialToken;\n  var key = OAuth._storageTokenPrefix + credentialToken;\n  var credentialSecret;\n\n  try {\n    credentialSecret = sessionStorage.getItem(key);\n    sessionStorage.removeItem(key);\n  } catch (e) {\n    Meteor._debug('error retrieving credentialSecret', e);\n  }\n\n  return {\n    loginService: migrationData.loginService,\n    credentialToken: credentialToken,\n    credentialSecret: credentialSecret\n  };\n}; // Launch an OAuth login flow.  For the popup login style, show the\n// popup.  For the redirect login style, save the credential token for\n// this login attempt in the reload migration data, and redirect to\n// the service for the login.\n//\n// options:\n//  loginService: \"facebook\", \"google\", etc.\n//  loginStyle: \"popup\" or \"redirect\"\n//  loginUrl: The URL at the login service provider to start the OAuth flow.\n//  credentialRequestCompleteCallback: for the popup flow, call when the popup\n//    is closed and we have the credential from the login service.\n//  credentialToken: our identifier for this login flow.\n//\n\n\nOAuth.launchLogin = function (options) {\n  if (!options.loginService) throw new Error('loginService required');\n\n  if (options.loginStyle === 'popup') {\n    OAuth.showPopup(options.loginUrl, options.credentialRequestCompleteCallback.bind(null, options.credentialToken), options.popupOptions);\n  } else if (options.loginStyle === 'redirect') {\n    OAuth.saveDataForRedirect(options.loginService, options.credentialToken);\n    window.location = options.loginUrl;\n  } else {\n    throw new Error('invalid login style');\n  }\n}; // Called by the popup when the OAuth flow is completed, right before\n// the popup closes.\n\n\nOAuth._handleCredentialSecret = function (credentialToken, secret) {\n  check(credentialToken, String);\n  check(secret, String);\n\n  if (!Object.prototype.hasOwnProperty.call(credentialSecrets, credentialToken)) {\n    credentialSecrets[credentialToken] = secret;\n  } else {\n    throw new Error(\"Duplicate credential token from OAuth login\");\n  }\n}; // Used by accounts-oauth, which needs both a credentialToken and the\n// corresponding to credential secret to call the `login` method over DDP.\n\n\nOAuth._retrieveCredentialSecret = function (credentialToken) {\n  // First check the secrets collected by OAuth._handleCredentialSecret,\n  // then check localStorage. This matches what we do in\n  // end_of_login_response.html.\n  var secret = credentialSecrets[credentialToken];\n\n  if (!secret) {\n    var localStorageKey = OAuth._storageTokenPrefix + credentialToken;\n    secret = Meteor._localStorage.getItem(localStorageKey);\n\n    Meteor._localStorage.removeItem(localStorageKey);\n  } else {\n    delete credentialSecrets[credentialToken];\n  }\n\n  return secret;\n};\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"oauth_cordova.js\":function module(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                         //\n// packages/oauth/oauth_cordova.js                                                                         //\n//                                                                                                         //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                           //\n// Cordova specific code for the OAuth package.\n// Open a popup window, centered on the screen, and call a callback when it\n// closes.\n//\n// @param url {String} url to show\n// @param callback {Function} Callback function to call on completion. Takes no\n//   arguments.\n// @param dimensions {optional Object(width, height)} The dimensions of\n//   the popup. If not passed defaults to something sane.\nOAuth.showPopup = function (url, callback, dimensions) {\n  var fail = function (err) {\n    return Meteor._debug(\"Error from OAuth popup: \" + JSON.stringify(err));\n  }; // When running on an android device, we sometimes see the\n  // `pageLoaded` callback fire twice for the final page in the OAuth\n  // popup, even though the page only loads once. This is maybe an\n  // Android bug or maybe something intentional about how onPageFinished\n  // works that we don't understand and isn't well-documented.\n\n\n  var oauthFinished = false;\n\n  var pageLoaded = function (event) {\n    if (oauthFinished) {\n      return;\n    }\n\n    if (event.url.indexOf(Meteor.absoluteUrl('_oauth')) === 0) {\n      var splitUrl = event.url.split(\"#\");\n      var hashFragment = splitUrl[1];\n\n      if (!hashFragment) {\n        throw new Error(\"No hash fragment in OAuth popup?\");\n      }\n\n      var credentials = JSON.parse(decodeURIComponent(hashFragment));\n\n      OAuth._handleCredentialSecret(credentials.credentialToken, credentials.credentialSecret);\n\n      oauthFinished = true; // On iOS, this seems to prevent \"Warning: Attempt to dismiss from\n      // view controller <MainViewController: ...> while a presentation\n      // or dismiss is in progress\". My guess is that the last\n      // navigation of the OAuth popup is still in progress while we try\n      // to close the popup. See\n      // https://issues.apache.org/jira/browse/CB-2285.\n      //\n      // XXX Can we make this timeout smaller?\n\n      setTimeout(function () {\n        popup.close();\n        callback();\n      }, 100);\n    }\n  };\n\n  var onExit = function () {\n    popup.removeEventListener('loadstop', pageLoaded);\n    popup.removeEventListener('loaderror', fail);\n    popup.removeEventListener('exit', onExit);\n  };\n\n  var popup = window.open(url, '_blank', 'location=yes,hidden=yes');\n  popup.addEventListener('loadstop', pageLoaded);\n  popup.addEventListener('loaderror', fail);\n  popup.addEventListener('exit', onExit);\n  popup.show();\n};\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"oauth_common.js\":function module(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                         //\n// packages/oauth/oauth_common.js                                                                          //\n//                                                                                                         //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                           //\nvar _objectSpread;\n\nmodule.link(\"@babel/runtime/helpers/objectSpread2\", {\n  default: function (v) {\n    _objectSpread = v;\n  }\n}, 0);\nOAuth._storageTokenPrefix = \"Meteor.oauth.credentialSecret-\";\n\nOAuth._redirectUri = function (serviceName, config, params, absoluteUrlOptions) {\n  // Clone because we're going to mutate 'params'. The 'cordova' and\n  // 'android' parameters are only used for picking the host of the\n  // redirect URL, and not actually included in the redirect URL itself.\n  var isCordova = false;\n  var isAndroid = false;\n\n  if (params) {\n    params = _objectSpread({}, params);\n    isCordova = params.cordova;\n    isAndroid = params.android;\n    delete params.cordova;\n    delete params.android;\n\n    if (Object.keys(params).length === 0) {\n      params = undefined;\n    }\n  }\n\n  if (Meteor.isServer && isCordova) {\n    var url = Npm.require('url');\n\n    var rootUrl = process.env.MOBILE_ROOT_URL || __meteor_runtime_config__.ROOT_URL;\n\n    if (isAndroid) {\n      // Match the replace that we do in cordova boilerplate\n      // (boilerplate-generator package).\n      // XXX Maybe we should put this in a separate package or something\n      // that is used here and by boilerplate-generator? Or maybe\n      // `Meteor.absoluteUrl` should know how to do this?\n      var parsedRootUrl = url.parse(rootUrl);\n\n      if (parsedRootUrl.hostname === \"localhost\") {\n        parsedRootUrl.hostname = \"10.0.2.2\";\n        delete parsedRootUrl.host;\n      }\n\n      rootUrl = url.format(parsedRootUrl);\n    }\n\n    absoluteUrlOptions = _objectSpread(_objectSpread({}, absoluteUrlOptions), {}, {\n      // For Cordova clients, redirect to the special Cordova root url\n      // (likely a local IP in development mode).\n      rootUrl: rootUrl\n    });\n  }\n\n  return URL._constructUrl(Meteor.absoluteUrl(\"_oauth/\" + serviceName, absoluteUrlOptions), null, params);\n};\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}}}},{\n  \"extensions\": [\n    \".js\",\n    \".json\"\n  ]\n});\n\nrequire(\"/node_modules/meteor/oauth/oauth_client.js\");\nrequire(\"/node_modules/meteor/oauth/oauth_cordova.js\");\nrequire(\"/node_modules/meteor/oauth/oauth_common.js\");\n\n/* Exports */\nPackage._define(\"oauth\", {\n  OAuth: OAuth\n});\n\n})();\n","servePath":"/packages/oauth.js","sourceMap":{"version":3,"sources":["packages/oauth/oauth_client.js","packages/oauth/oauth_cordova.js","packages/oauth/oauth_common.js"],"names":["credentialSecrets","OAuth","showPopup","url","callback","dimensions","Error","_loginStyle","service","config","options","Meteor","isCordova","loginStyle","includes","sessionStorage","setItem","removeItem","e","_stateParam","credentialToken","redirectUrl","state","settings","public","packages","oauth","setRedirectUrlWhenLoginStyleIsPopup","window","location","Base64","encode","JSON","stringify","saveDataForRedirect","loginService","Reload","_onMigrate","_migrate","immediateMigration","getDataAfterRedirect","migrationData","_migrationData","key","_storageTokenPrefix","credentialSecret","getItem","_debug","launchLogin","loginUrl","credentialRequestCompleteCallback","bind","popupOptions","_handleCredentialSecret","secret","check","String","Object","prototype","hasOwnProperty","call","_retrieveCredentialSecret","localStorageKey","_localStorage","fail","err","oauthFinished","pageLoaded","event","indexOf","absoluteUrl","splitUrl","split","hashFragment","credentials","parse","decodeURIComponent","setTimeout","popup","close","onExit","removeEventListener","open","addEventListener","show","_objectSpread","module","link","default","v","_redirectUri","serviceName","params","absoluteUrlOptions","isAndroid","cordova","android","keys","length","undefined","isServer","Npm","require","rootUrl","process","env","MOBILE_ROOT_URL","__meteor_runtime_config__","ROOT_URL","parsedRootUrl","hostname","host","format","URL","_constructUrl"],"mappings":"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","file":"/packages/oauth.js","sourcesContent":["// credentialToken -> credentialSecret. You must provide both the\n// credentialToken and the credentialSecret to retrieve an access token from\n// the _pendingCredentials collection.\nconst credentialSecrets = {};\n\nOAuth = {};\n\nOAuth.showPopup = (url, callback, dimensions) => {\n  throw new Error(\"OAuth.showPopup must be implemented on this arch.\");\n};\n\n// Determine the login style (popup or redirect) for this login flow.\n//\n//\nOAuth._loginStyle = (service, config, options) => {\n\n  if (Meteor.isCordova) {\n    return \"popup\";\n  }\n\n  let loginStyle = (options && options.loginStyle) || config.loginStyle || 'popup';\n\n  if (! [\"popup\", \"redirect\"].includes(loginStyle))\n    throw new Error(`Invalid login style: ${loginStyle}`);\n\n  // If we don't have session storage (for example, Safari in private\n  // mode), the redirect login flow won't work, so fallback to the\n  // popup style.\n  if (loginStyle === 'redirect') {\n    try {\n      sessionStorage.setItem('Meteor.oauth.test', 'test');\n      sessionStorage.removeItem('Meteor.oauth.test');\n    } catch (e) {\n      loginStyle = 'popup';\n    }\n  }\n\n  return loginStyle;\n};\n\nOAuth._stateParam = (loginStyle, credentialToken, redirectUrl) => {\n  const state = {\n    loginStyle,\n    credentialToken,\n    isCordova: Meteor.isCordova\n  };\n\n  if (loginStyle === 'redirect' ||\n    (Meteor.settings?.public?.packages?.oauth?.setRedirectUrlWhenLoginStyleIsPopup && loginStyle === 'popup')\n  ) {\n    state.redirectUrl = redirectUrl || ('' + window.location);\n  }\n\n  // Encode base64 as not all login services URI-encode the state\n  // parameter when they pass it back to us.\n  // Use the 'base64' package here because 'btoa' isn't supported in IE8/9.\n  return Base64.encode(JSON.stringify(state));\n};\n\n\n// At the beginning of the redirect login flow, before we redirect to\n// the login service, save the credential token for this login attempt\n// in the reload migration data.\n//\nOAuth.saveDataForRedirect = (loginService, credentialToken) => {\n  Reload._onMigrate('oauth', () => [true, { loginService, credentialToken }]);\n  Reload._migrate(null, {immediateMigration: true});\n};\n\n// At the end of the redirect login flow, when we've redirected back\n// to the application, retrieve the credentialToken and (if the login\n// was successful) the credentialSecret.\n//\n// Called at application startup.  Returns null if this is normal\n// application startup and we weren't just redirected at the end of\n// the login flow.\n//\nOAuth.getDataAfterRedirect = () => {\n  const migrationData = Reload._migrationData('oauth');\n\n  if (! (migrationData && migrationData.credentialToken))\n    return null;\n\n  const { credentialToken } = migrationData;\n  const key = OAuth._storageTokenPrefix + credentialToken;\n  let credentialSecret;\n  try {\n    credentialSecret = sessionStorage.getItem(key);\n    sessionStorage.removeItem(key);\n  } catch (e) {\n    Meteor._debug('error retrieving credentialSecret', e);\n  }\n  return {\n    loginService: migrationData.loginService,\n    credentialToken,\n    credentialSecret,\n  };\n};\n\n// Launch an OAuth login flow.  For the popup login style, show the\n// popup.  For the redirect login style, save the credential token for\n// this login attempt in the reload migration data, and redirect to\n// the service for the login.\n//\n// options:\n//  loginService: \"facebook\", \"google\", etc.\n//  loginStyle: \"popup\" or \"redirect\"\n//  loginUrl: The URL at the login service provider to start the OAuth flow.\n//  credentialRequestCompleteCallback: for the popup flow, call when the popup\n//    is closed and we have the credential from the login service.\n//  credentialToken: our identifier for this login flow.\n//\nOAuth.launchLogin = options => {\n  if (! options.loginService)\n    throw new Error('loginService required');\n  if (options.loginStyle === 'popup') {\n    OAuth.showPopup(\n      options.loginUrl,\n      options.credentialRequestCompleteCallback.bind(null, options.credentialToken),\n      options.popupOptions);\n  } else if (options.loginStyle === 'redirect') {\n    OAuth.saveDataForRedirect(options.loginService, options.credentialToken);\n    window.location = options.loginUrl;\n  } else {\n    throw new Error('invalid login style');\n  }\n};\n\n// Called by the popup when the OAuth flow is completed, right before\n// the popup closes.\nOAuth._handleCredentialSecret = (credentialToken, secret) => {\n  check(credentialToken, String);\n  check(secret, String);\n  if (! Object.prototype.hasOwnProperty.call(credentialSecrets, credentialToken)) {\n    credentialSecrets[credentialToken] = secret;\n  } else {\n    throw new Error(\"Duplicate credential token from OAuth login\");\n  }\n};\n\n// Used by accounts-oauth, which needs both a credentialToken and the\n// corresponding to credential secret to call the `login` method over DDP.\nOAuth._retrieveCredentialSecret = credentialToken => {\n  // First check the secrets collected by OAuth._handleCredentialSecret,\n  // then check localStorage. This matches what we do in\n  // end_of_login_response.html.\n  let secret = credentialSecrets[credentialToken];\n  if (! secret) {\n    const localStorageKey = OAuth._storageTokenPrefix + credentialToken;\n    secret = Meteor._localStorage.getItem(localStorageKey);\n    Meteor._localStorage.removeItem(localStorageKey);\n  } else {\n    delete credentialSecrets[credentialToken];\n  }\n  return secret;\n};\n","// Cordova specific code for the OAuth package.\n\n// Open a popup window, centered on the screen, and call a callback when it\n// closes.\n//\n// @param url {String} url to show\n// @param callback {Function} Callback function to call on completion. Takes no\n//   arguments.\n// @param dimensions {optional Object(width, height)} The dimensions of\n//   the popup. If not passed defaults to something sane.\nOAuth.showPopup = (url, callback, dimensions) => {\n  const fail = err => \n    Meteor._debug(`Error from OAuth popup: ${JSON.stringify(err)}`);\n\n  // When running on an android device, we sometimes see the\n  // `pageLoaded` callback fire twice for the final page in the OAuth\n  // popup, even though the page only loads once. This is maybe an\n  // Android bug or maybe something intentional about how onPageFinished\n  // works that we don't understand and isn't well-documented.\n  let oauthFinished = false;\n\n  const pageLoaded = event => {\n    if (oauthFinished) {\n      return;\n    }\n\n    if (event.url.indexOf(Meteor.absoluteUrl('_oauth')) === 0) {\n      const splitUrl = event.url.split(\"#\");\n      const hashFragment = splitUrl[1];\n\n      if (! hashFragment) {\n        throw new Error(\"No hash fragment in OAuth popup?\");\n      }\n\n      const credentials = JSON.parse(decodeURIComponent(hashFragment));\n      OAuth._handleCredentialSecret(credentials.credentialToken,\n                                    credentials.credentialSecret);\n\n      oauthFinished = true;\n\n      // On iOS, this seems to prevent \"Warning: Attempt to dismiss from\n      // view controller <MainViewController: ...> while a presentation\n      // or dismiss is in progress\". My guess is that the last\n      // navigation of the OAuth popup is still in progress while we try\n      // to close the popup. See\n      // https://issues.apache.org/jira/browse/CB-2285.\n      //\n      // XXX Can we make this timeout smaller?\n      setTimeout(() => {\n        popup.close();\n        callback();\n      }, 100);\n    }\n  };\n\n  const onExit = () => {\n    popup.removeEventListener('loadstop', pageLoaded);\n    popup.removeEventListener('loaderror', fail);\n    popup.removeEventListener('exit', onExit);\n  };\n\n  const popup = window.open(url, '_blank', 'location=yes,hidden=yes');\n  popup.addEventListener('loadstop', pageLoaded);\n  popup.addEventListener('loaderror', fail);\n  popup.addEventListener('exit', onExit);\n  popup.show();\n\n};\n","OAuth._storageTokenPrefix = \"Meteor.oauth.credentialSecret-\";\n\nOAuth._redirectUri = (serviceName, config, params, absoluteUrlOptions) => {\n  // Clone because we're going to mutate 'params'. The 'cordova' and\n  // 'android' parameters are only used for picking the host of the\n  // redirect URL, and not actually included in the redirect URL itself.\n  let isCordova = false;\n  let isAndroid = false;\n  if (params) {\n    params = { ...params };\n    isCordova = params.cordova;\n    isAndroid = params.android;\n    delete params.cordova;\n    delete params.android;\n    if (Object.keys(params).length === 0) {\n      params = undefined;\n    }\n  }\n\n  if (Meteor.isServer && isCordova) {\n    const url = Npm.require('url');\n    let rootUrl = process.env.MOBILE_ROOT_URL ||\n          __meteor_runtime_config__.ROOT_URL;\n\n    if (isAndroid) {\n      // Match the replace that we do in cordova boilerplate\n      // (boilerplate-generator package).\n      // XXX Maybe we should put this in a separate package or something\n      // that is used here and by boilerplate-generator? Or maybe\n      // `Meteor.absoluteUrl` should know how to do this?\n      const parsedRootUrl = url.parse(rootUrl);\n      if (parsedRootUrl.hostname === \"localhost\") {\n        parsedRootUrl.hostname = \"10.0.2.2\";\n        delete parsedRootUrl.host;\n      }\n      rootUrl = url.format(parsedRootUrl);\n    }\n\n    absoluteUrlOptions = {\n      ...absoluteUrlOptions,\n      // For Cordova clients, redirect to the special Cordova root url\n      // (likely a local IP in development mode).\n      rootUrl,\n    };\n  }\n\n  return URL._constructUrl(\n    Meteor.absoluteUrl(`_oauth/${serviceName}`, absoluteUrlOptions),\n    null,\n    params);\n};\n"]}}]