[{"type":"js","data":"/* Imports for global scope */\n\nMongoInternals = Package.mongo.MongoInternals;\nMongo = Package.mongo.Mongo;\nReactiveVar = Package['reactive-var'].ReactiveVar;\nTracker = Package.tracker.Tracker;\nDeps = Package.tracker.Deps;\nECMAScript = Package.ecmascript.ECMAScript;\nFilesCollection = Package['ostrio:files'].FilesCollection;\nRoles = Package['alanning:roles'].Roles;\nEmail = Package.email.Email;\nEmailInternals = Package.email.EmailInternals;\nHTTP = Package.http.HTTP;\nHTTPInternals = Package.http.HTTPInternals;\nMeteor = Package.meteor.Meteor;\nglobal = Package.meteor.global;\nmeteorEnv = Package.meteor.meteorEnv;\nWebApp = Package.webapp.WebApp;\nWebAppInternals = Package.webapp.WebAppInternals;\nmain = Package.webapp.main;\nDDP = Package['ddp-client'].DDP;\nDDPServer = Package['ddp-server'].DDPServer;\nLaunchScreen = Package['launch-screen'].LaunchScreen;\nmeteorInstall = Package.modules.meteorInstall;\nPromise = Package.promise.Promise;\nAccounts = Package['accounts-base'].Accounts;\nFS = Package['cfs:base-package'].FS;\nFacebook = Package['facebook-oauth'].Facebook;\nAutoupdate = Package.autoupdate.Autoupdate;\n\n","servePath":"/global-imports.js"},{"type":"js","data":"var require = meteorInstall({\"imports\":{\"api\":{\"accounts.js\":function module(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/api/accounts.js                                                                                             //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nlet Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nlet Roles;\nmodule.link(\"meteor/alanning:roles\", {\n  Roles(v) {\n    Roles = v;\n  }\n\n}, 1);\n\nif (Meteor.isServer) {\n  // This code only runs on the server\n  Meteor.publish('Meteor.users.age', function (_ref) {\n    let {\n      userIds\n    } = _ref;\n    new SimpleSchema({\n      userIds: {\n        type: [String]\n      }\n    }).validate({\n      userIds\n    }); // Select only the users that match the array of IDs passed in\n\n    const selector = {\n      _id: {\n        $in: userIds\n      }\n    }; // Only return one field\n\n    const options = {\n      fields: {\n        age: 1\n      }\n    };\n    return Meteor.users.find(selector, options, role);\n  });\n}\n\nMeteor.methods({\n  'user.addFields'(fields) {\n    console.log('fields: ', fields);\n    userId = Meteor.user()._id;\n\n    if (Roles.userIsInRole(userId, 'company')) {\n      Meteor.users.update(userId, {\n        $set: {\n          name: fields.name,\n          phone: fields.phone,\n          address: fields.address,\n          cnic: fields.cnic,\n          link: fields.link,\n          company: fields.company,\n          city: fields.city,\n          license: fields.license,\n          intro: fields.intro,\n          userType: fields.userType\n        }\n      });\n    }\n\n    if (Roles.userIsInRole(userId, 'customer')) {\n      Meteor.users.update(userId, {\n        $set: {\n          name: fields.name,\n          phone: fields.phone,\n          age: fields.age,\n          cnic: fields.cnic,\n          city: fields.city\n        }\n      });\n    }\n\n    if (Roles.userIsInRole(userId, 'guide')) {\n      Meteor.users.update(userId, {\n        $set: {\n          name: fields.name,\n          age: fields.age,\n          phone: fields.phone,\n          address: fields.address,\n          cnic: fields.cnic,\n          expertise: fields.expertise,\n          city: fields.city,\n          experience: fields.experience\n        }\n      });\n    }\n  },\n\n  'user.role'(userId, role) {\n    if (Meteor.isServer) {\n      Roles.addUsersToRoles(userId, role, null);\n    }\n  },\n\n  'user.checkrole'(userId, role) {\n    const check = Roles.userIsInRole(userId, role);\n    return check;\n  },\n\n  'users.companyData'(id) {\n    console.log(\"ID: \", id);\n    console.log(\"Return value \", Meteor.users.find({\n      _id: id\n    }, {\n      phone: 1,\n      address: 1,\n      link: 1,\n      license: 1,\n      intro: 1\n    }).fetch());\n    return Meteor.users.find({\n      _id: id\n    }, {\n      phone: 1,\n      address: 1,\n      link: 1,\n      license: 1,\n      intro: 1\n    }).fetch();\n  }\n\n});\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"home.js\":function module(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/api/home.js                                                                                                 //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.export({\n  HomeLinks: () => HomeLinks\n});\nlet Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nlet Mongo;\nmodule.link(\"meteor/mongo\", {\n  Mongo(v) {\n    Mongo = v;\n  }\n\n}, 1);\nconst HomeLinks = new Mongo.Collection('homeLinks');\n\nif (Meteor.isServer) {\n  // This code only runs on the server\n  Meteor.publish('homeLinks', () => {\n    if (Roles.userIsInRole(Meteor.userId(), 'company')) {\n      return HomeLinks.find({\n        link: \"PlotCompany\"\n      });\n    }\n  });\n}\n\nMeteor.methods({\n  'homeLinks.addLink'() {\n    console.log(\"Added\");\n    HomeLinks.insert({\n      link: \"PlotCompany\",\n      text: \"Add Plots\",\n      user: \"Company\"\n    });\n  }\n\n});\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"plots.js\":function module(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/api/plots.js                                                                                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.export({\n  Plots: () => Plots\n});\nlet Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nlet Mongo;\nmodule.link(\"meteor/mongo\", {\n  Mongo(v) {\n    Mongo = v;\n  }\n\n}, 1);\nlet check;\nmodule.link(\"meteor/check\", {\n  check(v) {\n    check = v;\n  }\n\n}, 2);\nconst Plots = new Mongo.Collection('plots');\n\n// export const UserPlotBookings = new Mongo.Collection('userPlotBookings');\nif (Meteor.isServer) {\n  // This code only runs on the server\n  const today = new Date();\n  Meteor.publish('plots', () => {\n    return Plots.find({}); //{\n    //   fields: {\n    //     bookings: 0\n    //   }\n    // });\n  }); // Meteor.publish('plotsBookings', () => {\n  //   return Plots.find({\n  //     owner: Meteor.userId()\n  //   });\n  //   });\n  // Meteor.publish('userPlotBookings', () => {\n  //   return UserPlotBookings.find({\n  //     customer: Meteor.userId()\n  //   });\n  //   });\n}\n\nMeteor.methods({\n  'plots.findOne'(plotId) {\n    return Plots.findOne({\n      _id: new Mongo.ObjectID(plotId)\n    });\n  },\n\n  'plots.insert'(plot, image) {\n    // check(plot.destination, String);\n    // check(cost, Int);\n    // check(startDate, Date);\n    // check(endDate, Date);\n    // check(plot.departure, String);\n    // check(plot.destinationInformation, String);\n    // Make sure the user is logged in before inserting a plot\n    if (!this.userId) {\n      throw new Meteor.Error('not-authorized');\n    }\n\n    if (!Roles.userIsInRole(this.userId, 'company')) {\n      throw new Meteor.Error('not-authorized');\n    } // console.log(\"company\", Meteor.user({\"_id\":this.userId}))\n\n\n    if (!plot.phone) {\n      plot.phone = Meteor.users.findOne({\n        _id: Meteor.userId()\n      }).phone;\n    }\n\n    if (!plot.cnic) {\n      plot.cnic = Meteor.users.findOne({\n        _id: Meteor.userId()\n      }).cnic;\n    }\n\n    console.log(\"imgaessss: \", plot.images.length);\n    var imagesNames = [];\n\n    var fs = require('fs');\n\n    const startpath = \"/Users/yusrakhalid/Desktop/Disk/Projects/Aangan/public/uploads/\";\n\n    for (var i = 0; i < plot.images.length; i++) {\n      imagesNames.push(plot.images[i].name);\n    }\n\n    Plots.insert({\n      size: plot.size,\n      createdAt: new Date(),\n      owner: this.userId,\n      company: Meteor.user({\n        \"_id\": this.userId\n      }).company,\n      phone: plot.phone,\n      constructionDate: plot.constructionDate,\n      cnic: plot.cnic,\n      city: plot.city,\n      location: plot.location,\n      image: image,\n      type: plot.type,\n      price: plot.price,\n      detail: plot.detail,\n      purpose: plot.purpose,\n      images: imagesNames\n    }, function (err, id) {\n      var dir = startpath + id;\n      console.log(\"id\", id, startpath, startpath + id);\n\n      if (!fs.existsSync(dir)) {\n        fs.mkdirSync(dir);\n      }\n\n      function savefile(i, arr) {\n        return Promise.asyncApply(() => {\n          if (i >= plot.images.length) {\n            return arr;\n          }\n\n          console.log(i, plot.images[i].name);\n          var imageBuffer = Buffer.from(plot.images[i].data.split(',')[1], 'base64'); //console = <Buffer 75 ab 5a 8a ...\n\n          var path = dir + '/' + plot.images[i].name; // change path\n\n          fs.writeFile(path, imageBuffer, err => {\n            // throws an error, you could also catch it here\n            if (err) throw err; // success case, the file was saved\n\n            arr.push(path);\n            savefile(i + 1, arr);\n          });\n        });\n      }\n\n      savefile(0, []);\n    });\n  },\n\n  'plots.remove'(plotId) {\n    check(plotId, String);\n    const plot = Plots.findOne(plotId);\n\n    if (plot.owner !== this.userId) {\n      // make sure only the owner can delete it\n      throw new Meteor.Error('not-authorized');\n    }\n\n    Plots.remove(plotId);\n  },\n\n  'plot.companyPhone'(id) {\n    return Meteor.users.findOne({\n      _id: id\n    }).phone;\n  },\n\n  // 'plots.book'(plotId, seats){\n  //   if (Roles.userIsInRole(Meteor.userId(), 'customer')){\n  //     const customer = Meteor.users.findOne({_id: Meteor.userId()});\n  //     const plot = Plots.findOne(plotId);\n  //     var bookings = [];\n  //     console.log(\"prev bookings: \", plot.bookings)\n  //     if (plot.bookings){\n  //       bookings = plot.bookings;\n  //       totalSeats = seats + plot.seats;\n  //     }\n  //     const prev = UserPlotBookings.findOne({customer: Meteor.userId(), plot_id: plotId});\n  //     if (prev){\n  //       var index = 0;\n  //       for (var i = 0; i < bookings.length; i++){\n  //         if (bookings[i].customer_id == Meteor.userId()){\n  //           index = i;\n  //         }\n  //       }\n  //       const prev_booking = bookings.splice(index,1);\n  //       seats = seats + parseInt(prev.seats);\n  //       console.log(\"New seats: \", seats);\n  //       UserPlotBookings.remove({_id:prev._id});\n  //     }\n  //     bookings.push({\n  //       customer_id: customer._id,\n  //       customer_name: customer.name,\n  //       customer_phone: customer.phone,\n  //       seats: seats,\n  //     });\n  //     console.log(\"Search booking: \", bookings);\n  //     if (!customer.phone){\n  //       throw new Meteor.Error('not-registered', \"Phone not found\");\n  //       // this.props.history.push('/SignupCustomer');\n  //     }\n  //     console.log(\"Bookings\", bookings);\n  //     Plots.update(plotId, { $set: { bookings: bookings , seats: totalSeats} });\n  //     UserPlotBookings.insert({\n  //       customer: Meteor.userId(),\n  //       plot_id: plotId,\n  //       plot_name: plot.destination,\n  //       plot_startDate: plot.startDate,\n  //       seats: seats\n  //     })\n  //     console.log(\"booked: \", Plots.findOne(plotId));\n  //     return (\"Booked\");\n  //   }\n  //   else{\n  //     throw new Meteor.Error('not-authorized');\n  //   }\n  // },\n  // 'plot.removeBooking'(bookingId){\n  //   const booking = UserPlotBookings.findOne({_id:bookingId});\n  //   const plot = Plots.findOne(booking.plot_id);\n  //   var bookings = plot.bookings;\n  //   var index = 0;\n  //   for (var i = 0; i < bookings.length; i++){\n  //     if (bookings[i].customer_id == Meteor.userId()){\n  //       index = i;\n  //     }\n  //   }\n  //   const prev_booking = bookings.splice(index,1);\n  //   totalSeats = plot.seats - booking.seats;\n  //   Plots.update(plot._id, { $set: { bookings: bookings , seats: totalSeats} });\n  //   UserPlotBookings.remove({_id:bookingId});\n  // }\n  // ,\n  'plots.search'(search) {\n    // console.log('plotsearch: ', search);\n    // if (!search.location){\n    //   search.location = {$ne: \"\"};\n    // }\n    // var https = require('follow-redirects').https;\n    // var options = {\n    //   'method': 'POST',\n    //   'hostname': 'api.sms.to',\n    //   'path': '/sms/send',\n    //   'headers': {\n    //     'Content-Type': 'application/json',\n    //     'Authorization': 'Bearer <YOUR_API_KEY_OR_ACCESS_TOKEN>'\n    //   },\n    //   'maxRedirects': 20\n    // };\n    // var req = https.request(options, function (res) {\n    //   var chunks = [];\n    //   res.on(\"data\", function (chunk) {\n    //     chunks.push(chunk);\n    //   });\n    //   res.on(\"end\", function (chunk) {\n    //     var body = Buffer.concat(chunks);\n    //     console.log(body.toString());\n    //   });\n    //   res.on(\"error\", function (error) {\n    //     console.error(error);\n    //   });\n    // });\n    // var postData =  \"{\\n    \\\"messages\\\": [\\n        {\\n            \\\"message\\\": \\\"This is a test message\\\",\\n            \\\"to\\\": \\\"+35799999999999\\\"\\n        }\\n    ],\\n    \\\"sender_id\\\": \\\"SMSto\\\",\\n    \\\"callback_url\\\": \\\"https://example.com/callback/handler\\\"\\n}\";\n    // req.write(postData);\n    // req.end();\n    // const data = {\n    //   username: \"92339773430\",\n    //   sender:\"AanganAPI\",\n    //   mobile: \"923489773430\",\n    //   message: \"Test\"\n    // }\n    // https://secure.h3techs.com/sms/api/send?email=yusra.khalid@outlook.com&key=07becd247c2a4f4fe502f23cd5987624fe&mask=H3 TEST SMS&to=923151231015&message=Test Message\n    // var response = HTTP.post(\"https://secure.h3techs.com/sms/api/send?email=yusra.khalid@outlook.com&key=07becd247c2a4f4fe502f23cd5987624fe&mask=H3 TEST SMS&to=923345005652&message=This is the test sms sent by aangan to Sir Abdullah Awan\");\n    // // var response = HTTP.post(\"https://sendpk.com/api/sms.php?api_key=923229773430-d6956b96-1790-4c9b-9354-3f5f0d895901&sender=8987&mobile=923229773430&message=5782\");\n    //   console.log(response);\n    if (!search.sizeMin) {\n      search.sizeMin = 0;\n    }\n\n    if (!search.sizeMax) {\n      search.sizeMax = 999999999;\n    }\n\n    if (!search.city) {\n      search.city = {\n        $ne: \"\"\n      };\n    }\n\n    if (!search.type) {\n      search.type = {\n        $ne: \"\"\n      };\n    }\n\n    if (!search.purpose) {\n      search.type = {\n        $ne: \"\"\n      };\n    }\n\n    console.log('plotsearch: ', search);\n\n    if (!search.constructionDate) {\n      // console.log(\"New search: \",Plots.find({ purpose:search.purpose, size:{ $lte:search.sizeMax }, size:{ $gte:search.sizeMin }, city:search.city, type:search.type, price: { $lte: search.price }}).fetch());\n      return Plots.find({\n        purpose: search.purpose,\n        size: {\n          $lte: search.sizeMax\n        },\n        size: {\n          $gte: search.sizeMin\n        },\n        city: search.city,\n        type: search.type,\n        price: {\n          $lte: search.price\n        }\n      }).fetch();\n    } else {\n      // console.log(\"New search: \",  Plots.find({ purpose:search.purpose, size:{ $lte:search.sizeMax }, size:{ $gte:search.sizeMin }, city:search.city, type:search.type, price: { $lte: search.price }, constructionDate: {$gte: search.constructionDate}}).fetch());\n      return Plots.find({\n        purpose: search.purpose,\n        size: {\n          $lte: search.sizeMax\n        },\n        size: {\n          $gte: search.sizeMin\n        },\n        city: search.city,\n        type: search.type,\n        price: {\n          $lte: search.price\n        },\n        constructionDate: {\n          $gte: search.constructionDate\n        }\n      }).fetch();\n    }\n  } // 'plots.price'(){\n  //   const plot = Plots.findOne({_id:\"ktvtjYGj7frscoztP\"});\n  //   console.log(\"Hunza  : \", plot);\n  //   console.log(\"Date: \", plot.startDate);\n  //   plot.startDate = '2020-8-25';\n  //   console.log(\"Date: \", plot.startDate);\n  //   // const priceint = parseInt(Plots.findOne({_id:id}).price);\n  //   // console.log(\"Price: \", priceint, typeof(priceint));\n  //   Plots.update(\"ktvtjYGj7frscoztP\", { $set: { startDate: '2020-08-25', endDate: '2020-08-30' } });\n  // }\n\n\n});\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"reviews.js\":function module(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/api/reviews.js                                                                                              //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n// import { Meteor } from 'meteor/meteor';\n// import { Mongo } from 'meteor/mongo';\n// import { check } from 'meteor/check';\n// export const Reviews = new Mongo.Collection('reviews');\n// if (Meteor.isServer) {\n//     // This code only runs on the server\n//   Meteor.publish('reviews', () => {\n//         return Reviews.find({});\n//     });\n// }\n// Meteor.methods({\n//     'reviews.insert'(review){\n//         if (Roles.userIsInRole(Meteor.userId(), 'customer')){\n//             // console.log(Meteor.userId)\n//             // console.log(\"inserting: \", review);\n//             if (review.company){\n//                 if (Reviews.find({company:review.company, reviewer: Meteor.userId()})){\n//                     Reviews.remove({company:review.company, reviewer: Meteor.userId()})\n//                 }\n//                 Reviews.insert({\n//                     company: review.company,\n//                     rating: review.rating,\n//                     reviewer: Meteor.userId(),\n//                     remarks: review.remarks,\n//                     username: Meteor.users.findOne({_id: Meteor.userId()}).username,\n//                     reviewer_dp: review.reviewer_dp,\n//                 });\n//             }\n//             if (review.guide) {\n//                 Reviews.insert({\n//                     company: review.company,\n//                     rating: review.rating,\n//                     reviewer: Meteor.userId,\n//                     remarks: review.remarks,\n//                     username: Meteor.users.findOne({_id: Meteor.userId()}).username\n//                 });\n//             }\n//         }\n//         else{\n//             throw new Meteor.Error('not-authorized');\n//         }\n//     },\n//     'reviews.delete'(id){\n//         if (Meteor.userId == Reviews.findOne({_id:id}).reviewer){\n//             Reviews.remove({_id:id});\n//         }\n//     },\n//     'reviews.companyRate'(companyId){\n//         rates = Reviews.find({company: companyId}).map((company) => { return parseFloat(company.rating); });\n//         if (rates.length == 0){\n//             return 0;\n//         }\n//         const sum = rates.reduce((total, value) => { return total + value; });\n//         const avg = sum/(rates.length);\n//         return (avg.toFixed(1));\n//     }\n//   });\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}},\"server\":{\"config\":{\"account.js\":function module(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// server/config/account.js                                                                                            //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nlet Accounts;\nmodule.link(\"meteor/accounts-base\", {\n  Accounts(v) {\n    Accounts = v;\n  }\n\n}, 0);\nlet post, data;\nmodule.link(\"jquery\", {\n  post(v) {\n    post = v;\n  },\n\n  data(v) {\n    data = v;\n  }\n\n}, 1);\n\n//authentication of user fields\nconst addCustomerFields = (options, user) => {\n  console.log(options);\n  const customizedUser = {\n    age: 0\n  };\n  Object.assign(customizedUser, user); // We still want the default hook's 'profile' behavior.\n\n  if (options.profile) {\n    customizedUser.profile = options.profile;\n  }\n\n  return customizedUser;\n};\n\nAccounts.onCreateUser(addCustomerFields); // process.env.MAIL_URL = \"smtp://yusrakhalid.97@gmail.com\"//removed for SO;\n\nprocess.env.MAIL_URL = \"smtps://yusrakhalid.97@gmail.com:hsfcvdsnjokkteec@smtp.gmail.com:465/\"; //587\n// process.env.MAIL_URL=\"smtps://support@aangan.pk:AangAn_pk@mail.aangan.pk:465\";\n\nAccounts.config({\n  sendVerificationEmail: true // forbidClientAccountCreation: true \n\n}); // var sms_url = \"\";\n\nAccounts.emailTemplates.siteName = \"Aangan\";\nAccounts.emailTemplates.from = \"Aangan<admin@aangan.io>\";\nAccounts.emailTemplates.verifyEmail = {\n  subject() {\n    return \"Activate your Aangan account!\";\n  },\n\n  text(user, url) {\n    console.log(\"Verify url: \", url);\n    const message = encodeURIComponent(\"Verify your Aangan profile at \\n \" + url);\n    const contact = encodeURIComponent(user.profile.phone);\n    console.log(\"message: \", message); // data = {\n    //   email:\"yusra.khalid@outlook.com\",\n    //   key:\"07becd247c2a4f4fe502f23cd5987624fe\",\n    //   mask:\"H# TEST SMS\",\n    //   to:\"923489773430\",\n    //   message:url\n    // };\n    // HTTP.call(post, \"https://secure.h3techs.com/sms/api/send\", data, (res)=>{console.log(\"res\",res)});\n    // var response = HTTP.post(\"https://secure.h3techs.com/sms/api/send?email=yusra.khalid@outlook.com&key=07becd247c2a4f4fe502f23cd5987624fe&mask=Digi Alert&to=\"+contact+\"&message=\"+message);\n\n    console.log(\"user: \", user.profile.phone); // console.log(\"Verify response: \",response);\n\n    return 'Hey ' + user.username + '! Verify your e-mail for Aanagan by following the link below:\\n\\n' + url;\n  }\n\n}; // Email.send({\n//   from: \"yusrakhalid.97@gmail.com\",\n//   cc: 'abdullah.bscs16seecs@seecs.edu.pk',\n//   subject: \"Aangan Email Verification\",\n//   text: \"To complete the signup and enjoy Aangan services click the link below.\",\n//       });\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"role.js\":function module(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// server/config/role.js                                                                                               //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nRoles.createRole('customer', {\n  unlessExists: true\n});\nRoles.createRole('company', {\n  unlessExists: true\n});\nRoles.createRole('guide', {\n  unlessExists: true\n});\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"api.js\":function module(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// server/api.js                                                                                                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.link(\"../imports/api/accounts\");\nmodule.link(\"../imports/api/plots\");\nmodule.link(\"../imports/api/reviews\");\nmodule.link(\"../imports/api/home\");\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"main.js\":function module(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// server/main.js                                                                                                      //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.link(\"./api\");\nmodule.link(\"./config/account\");\nmodule.link(\"./config/role\");\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}},{\n  \"extensions\": [\n    \".js\",\n    \".json\",\n    \".ts\",\n    \".tsx\",\n    \".mjs\"\n  ]\n});\n\nvar exports = require(\"/server/main.js\");","hash":"99e165f685ab2242e1576baf83762af51ba7b227","servePath":"/app.js","sourceMap":{"version":3,"sources":["imports/api/accounts.js","imports/api/home.js","imports/api/plots.js","imports/api/reviews.js","server/config/account.js","server/config/role.js","server/api.js","server/main.js"],"names":["Meteor","module","link","v","Roles","isServer","publish","userIds","SimpleSchema","type","String","validate","selector","_id","$in","options","fields","age","users","find","role","methods","console","log","userId","user","userIsInRole","update","$set","name","phone","address","cnic","company","city","license","intro","userType","expertise","experience","addUsersToRoles","check","id","fetch","export","HomeLinks","Mongo","Collection","insert","text","Plots","today","Date","plotId","findOne","ObjectID","plot","image","Error","images","length","imagesNames","fs","require","startpath","i","push","size","createdAt","owner","constructionDate","location","price","detail","purpose","err","dir","existsSync","mkdirSync","savefile","arr","imageBuffer","Buffer","from","data","split","path","writeFile","remove","search","sizeMin","sizeMax","$ne","$lte","$gte","Accounts","post","addCustomerFields","customizedUser","Object","assign","profile","onCreateUser","process","env","MAIL_URL","config","sendVerificationEmail","emailTemplates","siteName","verifyEmail","subject","url","message","encodeURIComponent","contact","username","createRole","unlessExists"],"mappings":"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C,YAAE,CAACyB,SAAH,CAAaD,IAAb,EAAmBL,WAAnB,EAAiCN,GAAD,IAAS;AACvC;AACA,gBAAIA,GAAJ,EAAS,MAAMA,GAAN,CAF8B,CAGvC;;AACAK,eAAG,CAACd,IAAJ,CAASoB,IAAT;AACAP,oBAAQ,CAACd,CAAC,GAAC,CAAH,EAAKe,GAAL,CAAR;AACD,WAND;AAOD,SAdD;AAAA;;AAeAD,cAAQ,CAAC,CAAD,EAAI,EAAJ,CAAR;AACH,KAtCD;AAuCD,GAzEU;;AA2EX,iBAAe1B,MAAf,EAAuB;AACrBZ,SAAK,CAACY,MAAD,EAAS3C,MAAT,CAAL;AACA,UAAM8C,IAAI,GAAGN,KAAK,CAACI,OAAN,CAAcD,MAAd,CAAb;;AACA,QAAIG,IAAI,CAACa,KAAL,KAAe,KAAK7C,MAAxB,EAAgC;AAC9B;AACA,YAAM,IAAIxB,MAAM,CAAC0D,KAAX,CAAiB,gBAAjB,CAAN;AACD;;AACDR,SAAK,CAACsC,MAAN,CAAanC,MAAb;AACD,GAnFU;;AAqFX,sBAAoBX,EAApB,EAAuB;AACrB,WACE1C,MAAM,CAACkB,KAAP,CAAaoC,OAAb,CAAqB;AAACzC,SAAG,EAAE6B;AAAN,KAArB,EAAgCZ,KADlC;AAGD,GAzFU;;AA4FX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,iBAAe2D,MAAf,EAAsB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;A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","file":"/app.js","sourcesContent":["import { Meteor } from 'meteor/meteor';\nimport { Roles } from 'meteor/alanning:roles';\n\nif (Meteor.isServer) {\n// This code only runs on the server\n    Meteor.publish('Meteor.users.age', function ({ userIds }) {\n        new SimpleSchema({\n        userIds: { type: [String] }\n        }).validate({ userIds });\n    \n        // Select only the users that match the array of IDs passed in\n        const selector = {\n            _id: { $in: userIds }\n        };\n    \n        // Only return one field\n        const options = {\n            fields: { age: 1 }\n        };\n        return Meteor.users.find(selector, options, role);\n    });\n}\n\nMeteor.methods({\n\n    'user.addFields'(fields){\n        console.log('fields: ', fields);\n        userId = Meteor.user()._id;\n        if (Roles.userIsInRole(userId, 'company')){\n            Meteor.users.update(userId, {\n                $set: {\n                name: fields.name,\n                phone: fields.phone,\n                address: fields.address,\n                cnic: fields.cnic,\n                link: fields.link,\n                company: fields.company,\n                city: fields.city,\n                license: fields.license,\n                intro: fields.intro,\n                userType: fields.userType\n                }\n            });\n        }\n        if (Roles.userIsInRole(userId, 'customer')){\n            Meteor.users.update(userId, {\n                $set: {\n                name: fields.name,\n                phone: fields.phone,\n                age: fields.age,\n                cnic: fields.cnic,\n                city: fields.city,\n                }\n            });\n        }\n        if (Roles.userIsInRole(userId, 'guide')){\n            Meteor.users.update(userId, {\n                $set: {\n                name: fields.name,\n                age: fields.age,\n                phone: fields.phone,\n                address: fields.address,\n                cnic: fields.cnic,\n                expertise: fields.expertise,\n                city: fields.city,\n                experience: fields.experience,\n                }\n            });\n        }\n    },\n\n    'user.role'(userId, role){\n        if (Meteor.isServer) {\n            Roles.addUsersToRoles(userId, role, null);\n        }\n    },\n\n    'user.checkrole'(userId, role){\n        const check = Roles.userIsInRole(userId, role);\n        return check;\n    },\n\n    'users.companyData'(id){\n        console.log(\"ID: \", id);\n        console.log(\"Return value \",Meteor.users.find({_id:id},{phone:1, address:1, link:1, license:1, intro:1}).fetch());\n        return(\n            Meteor.users.find({_id:id},{phone:1, address:1, link:1, license:1, intro:1}).fetch()\n        )\n    }\n})","import { Meteor } from 'meteor/meteor';\nimport { Mongo } from 'meteor/mongo';\n// import { check } from 'meteor/check';\n\n\nexport const HomeLinks = new Mongo.Collection('homeLinks');\n\nif (Meteor.isServer) {\n    // This code only runs on the server\n  Meteor.publish('homeLinks', () => {\n    if (Roles.userIsInRole(Meteor.userId(), 'company')){\n        return HomeLinks.find({link:\"PlotCompany\"});\n    }\n    });\n\n    \n}\n\nMeteor.methods({\n  'homeLinks.addLink'(){\n    console.log(\"Added\");\n    HomeLinks.insert({link:\"PlotCompany\", text:\"Add Plots\", user:\"Company\"})\n  }\n})\n","import { Meteor } from 'meteor/meteor';\nimport { Mongo } from 'meteor/mongo';\nimport { check } from 'meteor/check';\n// import {FileAPI} from 'file-api';\n\nexport const Plots = new Mongo.Collection('plots');\n// export const UserPlotBookings = new Mongo.Collection('userPlotBookings');\n\nif (Meteor.isServer) {\n    // This code only runs on the server\n    const today = new Date();\n  Meteor.publish('plots', () => {\n    return Plots.find({});\n      //{\n    //   fields: {\n    //     bookings: 0\n    //   }\n    // });\n  });\n    // Meteor.publish('plotsBookings', () => {\n    //   return Plots.find({\n    //     owner: Meteor.userId()\n    //   });\n    //   });\n    // Meteor.publish('userPlotBookings', () => {\n    //   return UserPlotBookings.find({\n    //     customer: Meteor.userId()\n    //   });\n    //   });\n}\n   \nMeteor.methods({\n\n    'plots.findOne'(plotId){\n      return (Plots.findOne({_id: new Mongo.ObjectID(plotId)}));\n    },\n    \n    'plots.insert'(plot, image) {\n      // check(plot.destination, String);\n      // check(cost, Int);\n      // check(startDate, Date);\n      // check(endDate, Date);\n      // check(plot.departure, String);\n      // check(plot.destinationInformation, String);\n      // Make sure the user is logged in before inserting a plot\n      if (! this.userId) {\n        throw new Meteor.Error('not-authorized');\n      }\n      if (! Roles.userIsInRole(this.userId, 'company')){\n        throw new Meteor.Error('not-authorized');\n      }\n      // console.log(\"company\", Meteor.user({\"_id\":this.userId}))\n      if (!plot.phone){\n        plot.phone = Meteor.users.findOne({_id: Meteor.userId()}).phone;\n      }\n      if (!plot.cnic){\n        plot.cnic = Meteor.users.findOne({_id: Meteor.userId()}).cnic;\n      }\n      console.log(\"imgaessss: \", plot.images.length);    \n      var imagesNames = [];\n      var fs = require('fs');\n      const startpath = \"/Users/yusrakhalid/Desktop/Disk/Projects/Aangan/public/uploads/\";\n      for(var i = 0; i < plot.images.length;i++){\n        imagesNames.push(plot.images[i].name);\n      }\n      Plots.insert({\n        size: plot.size,\n        createdAt: new Date(),\n        owner: this.userId,\n        company: Meteor.user({\"_id\":this.userId}).company,\n        phone: plot.phone,\n        constructionDate: plot.constructionDate,\n        cnic: plot.cnic,\n        city: plot.city,\n        location: plot.location,\n        image: image,\n        type: plot.type,\n        price: plot.price,\n        detail: plot.detail,\n        purpose:plot.purpose,\n        images:imagesNames,\n      },function (err,id){\n        var dir = startpath+id;\n        console.log(\"id\", id, startpath, startpath+id);\n          if (!fs.existsSync(dir)){\n              fs.mkdirSync(dir);\n          }\n          async function savefile(i, arr){\n            if (i>=plot.images.length){\n              return arr;\n            }\n            console.log(i,plot.images[i].name);\n            var imageBuffer = Buffer.from(plot.images[i].data.split(',')[1], 'base64'); //console = <Buffer 75 ab 5a 8a ...\n            var path = dir+'/'+plot.images[i].name; // change path\n            fs.writeFile(path, imageBuffer, (err) => { \n              // throws an error, you could also catch it here\n              if (err) throw err;\n              // success case, the file was saved\n              arr.push(path);\n              savefile(i+1,arr);\n            });\n          }\n          savefile(0, []);\n      });\n    },\n\n    'plots.remove'(plotId) {\n      check(plotId, String);\n      const plot = Plots.findOne(plotId);\n      if (plot.owner !== this.userId) {\n        // make sure only the owner can delete it\n        throw new Meteor.Error('not-authorized');\n      }\n      Plots.remove(plotId);\n    },\n\n    'plot.companyPhone'(id){\n      return (\n        Meteor.users.findOne({_id: id}).phone\n      )\n    },\n\n\n    // 'plots.book'(plotId, seats){\n    //   if (Roles.userIsInRole(Meteor.userId(), 'customer')){\n    //     const customer = Meteor.users.findOne({_id: Meteor.userId()});\n    //     const plot = Plots.findOne(plotId);\n    //     var bookings = [];\n    //     console.log(\"prev bookings: \", plot.bookings)\n    //     if (plot.bookings){\n    //       bookings = plot.bookings;\n    //       totalSeats = seats + plot.seats;\n    //     }\n    //     const prev = UserPlotBookings.findOne({customer: Meteor.userId(), plot_id: plotId});\n    //     if (prev){\n    //       var index = 0;\n    //       for (var i = 0; i < bookings.length; i++){\n    //         if (bookings[i].customer_id == Meteor.userId()){\n    //           index = i;\n    //         }\n    //       }\n    //       const prev_booking = bookings.splice(index,1);\n    //       seats = seats + parseInt(prev.seats);\n    //       console.log(\"New seats: \", seats);\n    //       UserPlotBookings.remove({_id:prev._id});\n    //     }\n    //     bookings.push({\n    //       customer_id: customer._id,\n    //       customer_name: customer.name,\n    //       customer_phone: customer.phone,\n    //       seats: seats,\n    //     });\n    //     console.log(\"Search booking: \", bookings);\n    //     if (!customer.phone){\n    //       throw new Meteor.Error('not-registered', \"Phone not found\");\n    //       // this.props.history.push('/SignupCustomer');\n    //     }\n    //     console.log(\"Bookings\", bookings);\n    //     Plots.update(plotId, { $set: { bookings: bookings , seats: totalSeats} });\n    //     UserPlotBookings.insert({\n    //       customer: Meteor.userId(),\n    //       plot_id: plotId,\n    //       plot_name: plot.destination,\n    //       plot_startDate: plot.startDate,\n    //       seats: seats\n    //     })\n    //     console.log(\"booked: \", Plots.findOne(plotId));\n    //     return (\"Booked\");\n    //   }\n    //   else{\n    //     throw new Meteor.Error('not-authorized');\n    //   }\n    // },\n\n    // 'plot.removeBooking'(bookingId){\n    //   const booking = UserPlotBookings.findOne({_id:bookingId});\n    //   const plot = Plots.findOne(booking.plot_id);\n    //   var bookings = plot.bookings;\n    //   var index = 0;\n    //   for (var i = 0; i < bookings.length; i++){\n    //     if (bookings[i].customer_id == Meteor.userId()){\n    //       index = i;\n    //     }\n    //   }\n    //   const prev_booking = bookings.splice(index,1);\n    //   totalSeats = plot.seats - booking.seats;\n    //   Plots.update(plot._id, { $set: { bookings: bookings , seats: totalSeats} });\n    //   UserPlotBookings.remove({_id:bookingId});\n    // }\n    // ,\n\n    'plots.search'(search){\n      // console.log('plotsearch: ', search);\n      // if (!search.location){\n      //   search.location = {$ne: \"\"};\n      // }\n      // var https = require('follow-redirects').https;\n      // var options = {\n      //   'method': 'POST',\n      //   'hostname': 'api.sms.to',\n      //   'path': '/sms/send',\n      //   'headers': {\n      //     'Content-Type': 'application/json',\n      //     'Authorization': 'Bearer <YOUR_API_KEY_OR_ACCESS_TOKEN>'\n      //   },\n      //   'maxRedirects': 20\n      // };\n\n      // var req = https.request(options, function (res) {\n      //   var chunks = [];\n\n      //   res.on(\"data\", function (chunk) {\n      //     chunks.push(chunk);\n      //   });\n\n      //   res.on(\"end\", function (chunk) {\n      //     var body = Buffer.concat(chunks);\n      //     console.log(body.toString());\n      //   });\n\n      //   res.on(\"error\", function (error) {\n      //     console.error(error);\n      //   });\n      // });\n\n      // var postData =  \"{\\n    \\\"messages\\\": [\\n        {\\n            \\\"message\\\": \\\"This is a test message\\\",\\n            \\\"to\\\": \\\"+35799999999999\\\"\\n        }\\n    ],\\n    \\\"sender_id\\\": \\\"SMSto\\\",\\n    \\\"callback_url\\\": \\\"https://example.com/callback/handler\\\"\\n}\";\n\n      // req.write(postData);\n\n      // req.end();\n      // const data = {\n      //   username: \"92339773430\",\n      //   sender:\"AanganAPI\",\n      //   mobile: \"923489773430\",\n      //   message: \"Test\"\n      // }\n      // https://secure.h3techs.com/sms/api/send?email=yusra.khalid@outlook.com&key=07becd247c2a4f4fe502f23cd5987624fe&mask=H3 TEST SMS&to=923151231015&message=Test Message\n      // var response = HTTP.post(\"https://secure.h3techs.com/sms/api/send?email=yusra.khalid@outlook.com&key=07becd247c2a4f4fe502f23cd5987624fe&mask=H3 TEST SMS&to=923345005652&message=This is the test sms sent by aangan to Sir Abdullah Awan\");\n      // // var response = HTTP.post(\"https://sendpk.com/api/sms.php?api_key=923229773430-d6956b96-1790-4c9b-9354-3f5f0d895901&sender=8987&mobile=923229773430&message=5782\");\n      //   console.log(response);\n      if (!search.sizeMin){\n        search.sizeMin = 0;\n      }\n      if (!search.sizeMax){\n        search.sizeMax = 999999999;\n      }\n      if (!search.city){\n        search.city = {$ne: \"\"};\n      }\n      if (!search.type){\n        search.type = {$ne: \"\"};\n      }\n      if (!search.purpose){\n        search.type = {$ne: \"\"};\n      }\n      console.log('plotsearch: ', search);\n      if (!search.constructionDate){\n        // console.log(\"New search: \",Plots.find({ purpose:search.purpose, size:{ $lte:search.sizeMax }, size:{ $gte:search.sizeMin }, city:search.city, type:search.type, price: { $lte: search.price }}).fetch());\n        return Plots.find({ purpose:search.purpose, size:{ $lte:search.sizeMax }, size:{ $gte:search.sizeMin }, city:search.city, type:search.type, price: { $lte: search.price }}).fetch();\n      }\n      else{\n        // console.log(\"New search: \",  Plots.find({ purpose:search.purpose, size:{ $lte:search.sizeMax }, size:{ $gte:search.sizeMin }, city:search.city, type:search.type, price: { $lte: search.price }, constructionDate: {$gte: search.constructionDate}}).fetch());\n        return Plots.find({ purpose:search.purpose, size:{ $lte:search.sizeMax }, size:{ $gte:search.sizeMin }, city:search.city, type:search.type, price: { $lte: search.price }, constructionDate: {$gte: search.constructionDate}}).fetch();\n      }\n    },\n\n    // 'plots.price'(){\n    //   const plot = Plots.findOne({_id:\"ktvtjYGj7frscoztP\"});\n    //   console.log(\"Hunza  : \", plot);\n    //   console.log(\"Date: \", plot.startDate);\n    //   plot.startDate = '2020-8-25';\n    //   console.log(\"Date: \", plot.startDate);\n    //   // const priceint = parseInt(Plots.findOne({_id:id}).price);\n    //   // console.log(\"Price: \", priceint, typeof(priceint));\n\n    //   Plots.update(\"ktvtjYGj7frscoztP\", { $set: { startDate: '2020-08-25', endDate: '2020-08-30' } });\n    // }\n\n\n  });","// import { Meteor } from 'meteor/meteor';\n// import { Mongo } from 'meteor/mongo';\n// import { check } from 'meteor/check';\n\n\n// export const Reviews = new Mongo.Collection('reviews');\n\n// if (Meteor.isServer) {\n//     // This code only runs on the server\n//   Meteor.publish('reviews', () => {\n//         return Reviews.find({});\n//     });\n// }\n   \n// Meteor.methods({\n//     'reviews.insert'(review){\n//         if (Roles.userIsInRole(Meteor.userId(), 'customer')){\n//             // console.log(Meteor.userId)\n//             // console.log(\"inserting: \", review);\n//             if (review.company){\n//                 if (Reviews.find({company:review.company, reviewer: Meteor.userId()})){\n//                     Reviews.remove({company:review.company, reviewer: Meteor.userId()})\n//                 }\n//                 Reviews.insert({\n//                     company: review.company,\n//                     rating: review.rating,\n//                     reviewer: Meteor.userId(),\n//                     remarks: review.remarks,\n//                     username: Meteor.users.findOne({_id: Meteor.userId()}).username,\n//                     reviewer_dp: review.reviewer_dp,\n//                 });\n//             }\n//             if (review.guide) {\n//                 Reviews.insert({\n//                     company: review.company,\n//                     rating: review.rating,\n//                     reviewer: Meteor.userId,\n//                     remarks: review.remarks,\n//                     username: Meteor.users.findOne({_id: Meteor.userId()}).username\n//                 });\n//             }\n//         }\n//         else{\n//             throw new Meteor.Error('not-authorized');\n//         }\n//     },\n\n//     'reviews.delete'(id){\n//         if (Meteor.userId == Reviews.findOne({_id:id}).reviewer){\n//             Reviews.remove({_id:id});\n//         }\n//     },\n\n//     'reviews.companyRate'(companyId){\n//         rates = Reviews.find({company: companyId}).map((company) => { return parseFloat(company.rating); });\n//         if (rates.length == 0){\n//             return 0;\n//         }\n//         const sum = rates.reduce((total, value) => { return total + value; });\n//         const avg = sum/(rates.length);\n//         return (avg.toFixed(1));\n        \n//     }\n//   });","import { Accounts } from 'meteor/accounts-base';\nimport { post, data } from 'jquery';\n\n//authentication of user fields\n\nconst addCustomerFields = (options, user) => {\n    console.log(options);\n    const customizedUser = {\n        age: 0\n    };\n    Object.assign(customizedUser, user);\n    \n      // We still want the default hook's 'profile' behavior.\n      if (options.profile) {\n        customizedUser.profile = options.profile;\n      }\n    \n      return customizedUser;\n};\n\nAccounts.onCreateUser(addCustomerFields);\n\n// process.env.MAIL_URL = \"smtp://yusrakhalid.97@gmail.com\"//removed for SO;\n  process.env.MAIL_URL=\"smtps://yusrakhalid.97@gmail.com:hsfcvdsnjokkteec@smtp.gmail.com:465/\"; //587\n  // process.env.MAIL_URL=\"smtps://support@aangan.pk:AangAn_pk@mail.aangan.pk:465\";\n\nAccounts.config({\n    sendVerificationEmail:true,\n    // forbidClientAccountCreation: true \n});\n// var sms_url = \"\";\nAccounts.emailTemplates.siteName = \"Aangan\";\nAccounts.emailTemplates.from = \"Aangan<admin@aangan.io>\";\nAccounts.emailTemplates.verifyEmail = {\n  subject() {\n      return \"Activate your Aangan account!\";\n  },\n  text(user, url) {\n      console.log(\"Verify url: \",url);\n      const message = encodeURIComponent(\"Verify your Aangan profile at \\n \"+url); \n      const contact = encodeURIComponent(user.profile.phone);\n      console.log(\"message: \", message);\n      // data = {\n      //   email:\"yusra.khalid@outlook.com\",\n      //   key:\"07becd247c2a4f4fe502f23cd5987624fe\",\n      //   mask:\"H# TEST SMS\",\n      //   to:\"923489773430\",\n      //   message:url\n      // };\n      // HTTP.call(post, \"https://secure.h3techs.com/sms/api/send\", data, (res)=>{console.log(\"res\",res)});\n      // var response = HTTP.post(\"https://secure.h3techs.com/sms/api/send?email=yusra.khalid@outlook.com&key=07becd247c2a4f4fe502f23cd5987624fe&mask=Digi Alert&to=\"+contact+\"&message=\"+message);\n      console.log(\"user: \",user.profile.phone);\n      // console.log(\"Verify response: \",response);\n      return 'Hey ' + user.username \n      + '! Verify your e-mail for Aanagan by following the link below:\\n\\n'\n      + url;\n  }\n};\n\n// Email.send({\n//   from: \"yusrakhalid.97@gmail.com\",\n//   cc: 'abdullah.bscs16seecs@seecs.edu.pk',\n//   subject: \"Aangan Email Verification\",\n//   text: \"To complete the signup and enjoy Aangan services click the link below.\",\n//       });","Roles.createRole('customer', { unlessExists: true });\nRoles.createRole('company', { unlessExists: true });\nRoles.createRole('guide', { unlessExists: true });","import '../imports/api/accounts';\nimport '../imports/api/plots';\nimport '../imports/api/reviews';\nimport '../imports/api/home';\n","\nimport './api';\n\nimport './config/account';\nimport './config/role';"]}}]