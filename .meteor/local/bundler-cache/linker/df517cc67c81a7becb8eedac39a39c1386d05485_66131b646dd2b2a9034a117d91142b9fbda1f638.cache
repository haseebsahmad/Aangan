[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar Tracker = Package.tracker.Tracker;\nvar Deps = Package.tracker.Deps;\nvar Retry = Package.retry.Retry;\nvar DDP = Package['ddp-client'].DDP;\nvar meteorInstall = Package.modules.meteorInstall;\nvar meteorBabelHelpers = Package.modules.meteorBabelHelpers;\nvar Promise = Package.promise.Promise;\nvar Symbol = Package['ecmascript-runtime-client'].Symbol;\nvar Map = Package['ecmascript-runtime-client'].Map;\nvar Set = Package['ecmascript-runtime-client'].Set;\n\n/* Package-scope variables */\nvar Autoupdate;\n\nvar require = meteorInstall({\"node_modules\":{\"meteor\":{\"autoupdate\":{\"autoupdate_cordova.js\":function module(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                 //\n// packages/autoupdate/autoupdate_cordova.js                                                       //\n//                                                                                                 //\n/////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                   //\nmodule.export({\n  Autoupdate: function () {\n    return Autoupdate;\n  }\n});\nvar ClientVersions;\nmodule.link(\"./client_versions.js\", {\n  ClientVersions: function (v) {\n    ClientVersions = v;\n  }\n}, 0);\nvar autoupdateVersionsCordova = __meteor_runtime_config__.autoupdate.versions[\"web.cordova\"] || {\n  version: \"unknown\"\n};\nvar Autoupdate = {};\n// Stores acceptable client versions.\nvar clientVersions = new ClientVersions();\nMeteor.connection.registerStore(\"meteor_autoupdate_clientVersions\", clientVersions.createStore());\n\nAutoupdate.newClientAvailable = function () {\n  return clientVersions.newClientAvailable(\"web.cordova\", [\"version\"], autoupdateVersionsCordova);\n};\n\nvar retry = new Retry({\n  // Unlike the stream reconnect use of Retry, which we want to be instant\n  // in normal operation, this is a wacky failure. We don't want to retry\n  // right away, we can start slowly.\n  //\n  // A better way than timeconstants here might be to use the knowledge\n  // of when we reconnect to help trigger these retries. Typically, the\n  // server fixing code will result in a restart and reconnect, but\n  // potentially the subscription could have a transient error.\n  minCount: 0,\n  // don't do any immediate retries\n  baseTimeout: 30 * 1000 // start with 30s\n\n});\nvar failures = 0;\n\nAutoupdate._retrySubscription = function () {\n  var _meteor_runtime_conf = __meteor_runtime_config__,\n      appId = _meteor_runtime_conf.appId;\n  Meteor.subscribe(\"meteor_autoupdate_clientVersions\", appId, {\n    onError: function (error) {\n      console.log(\"autoupdate subscription failed:\", error);\n      failures++;\n      retry.retryLater(failures, function () {\n        // Just retry making the subscription, don't reload the whole\n        // page. While reloading would catch more cases (for example,\n        // the server went back a version and is now doing old-style hot\n        // code push), it would also be more prone to reload loops,\n        // which look really bad to the user. Just retrying the\n        // subscription over DDP means it is at least possible to fix by\n        // updating the server.\n        Autoupdate._retrySubscription();\n      });\n    },\n    onReady: function () {\n      if (Package.reload) {\n        var checkNewVersionDocument = function (doc) {\n          if (doc.version !== autoupdateVersionsCordova.version) {\n            newVersionAvailable();\n          }\n        };\n\n        clientVersions.watch(checkNewVersionDocument, {\n          filter: \"web.cordova\"\n        });\n      }\n    }\n  });\n};\n\nMeteor.startup(function () {\n  WebAppLocalServer.onNewVersionReady(function () {\n    if (Package.reload) {\n      Package.reload.Reload._reload();\n    }\n  });\n\n  Autoupdate._retrySubscription();\n});\n\nfunction newVersionAvailable() {\n  WebAppLocalServer.checkForUpdates();\n}\n/////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"client_versions.js\":function module(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                 //\n// packages/autoupdate/client_versions.js                                                          //\n//                                                                                                 //\n/////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                   //\nvar _objectSpread;\n\nmodule.link(\"@babel/runtime/helpers/objectSpread2\", {\n  default: function (v) {\n    _objectSpread = v;\n  }\n}, 0);\nmodule.export({\n  ClientVersions: function () {\n    return ClientVersions;\n  }\n});\nvar Tracker;\nmodule.link(\"meteor/tracker\", {\n  Tracker: function (v) {\n    Tracker = v;\n  }\n}, 0);\n\nvar ClientVersions = /*#__PURE__*/function () {\n  function ClientVersions() {\n    this._versions = new Map();\n    this._watchCallbacks = new Set();\n  } // Creates a Livedata store for use with `Meteor.connection.registerStore`.\n  // After the store is registered, document updates reported by Livedata are\n  // merged with the documents in this `ClientVersions` instance.\n\n\n  var _proto = ClientVersions.prototype;\n\n  _proto.createStore = function () {\n    function createStore() {\n      var _this = this;\n\n      return {\n        update: function (_ref) {\n          var id = _ref.id,\n              msg = _ref.msg,\n              fields = _ref.fields;\n\n          if (msg === \"added\" || msg === \"changed\") {\n            _this.set(id, fields);\n          }\n        }\n      };\n    }\n\n    return createStore;\n  }();\n\n  _proto.hasVersions = function () {\n    function hasVersions() {\n      return this._versions.size > 0;\n    }\n\n    return hasVersions;\n  }();\n\n  _proto.get = function () {\n    function get(id) {\n      return this._versions.get(id);\n    }\n\n    return get;\n  }() // Adds or updates a version document and invokes registered callbacks for the\n  // added/updated document. If a document with the given ID already exists, its\n  // fields are merged with `fields`.\n  ;\n\n  _proto.set = function () {\n    function set(id, fields) {\n      var version = this._versions.get(id);\n\n      var isNew = false;\n\n      if (version) {\n        Object.assign(version, fields);\n      } else {\n        version = _objectSpread({\n          _id: id\n        }, fields);\n        isNew = true;\n\n        this._versions.set(id, version);\n      }\n\n      this._watchCallbacks.forEach(function (_ref2) {\n        var fn = _ref2.fn,\n            filter = _ref2.filter;\n\n        if (!filter || filter === version._id) {\n          fn(version, isNew);\n        }\n      });\n    }\n\n    return set;\n  }() // Registers a callback that will be invoked when a version document is added\n  // or changed. Calling the function returned by `watch` removes the callback.\n  // If `skipInitial` is true, the callback isn't be invoked for existing\n  // documents. If `filter` is set, the callback is only invoked for documents\n  // with ID `filter`.\n  ;\n\n  _proto.watch = function () {\n    function watch(fn) {\n      var _this2 = this;\n\n      var _ref3 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n          skipInitial = _ref3.skipInitial,\n          filter = _ref3.filter;\n\n      if (!skipInitial) {\n        var resolved = Promise.resolve();\n\n        this._versions.forEach(function (version) {\n          if (!filter || filter === version._id) {\n            resolved.then(function () {\n              return fn(version, true);\n            });\n          }\n        });\n      }\n\n      var callback = {\n        fn: fn,\n        filter: filter\n      };\n\n      this._watchCallbacks.add(callback);\n\n      return function () {\n        return _this2._watchCallbacks.delete(callback);\n      };\n    }\n\n    return watch;\n  }() // A reactive data source for `Autoupdate.newClientAvailable`.\n  ;\n\n  _proto.newClientAvailable = function () {\n    function newClientAvailable(id, fields, currentVersion) {\n      function isNewVersion(version) {\n        return version._id === id && fields.some(function (field) {\n          return version[field] !== currentVersion[field];\n        });\n      }\n\n      var dependency = new Tracker.Dependency();\n      var version = this.get(id);\n      dependency.depend();\n      var stop = this.watch(function (version) {\n        if (isNewVersion(version)) {\n          dependency.changed();\n          stop();\n        }\n      }, {\n        skipInitial: true\n      });\n      return !!version && isNewVersion(version);\n    }\n\n    return newClientAvailable;\n  }();\n\n  return ClientVersions;\n}();\n/////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}}}},{\n  \"extensions\": [\n    \".js\",\n    \".json\"\n  ]\n});\n\nvar exports = require(\"/node_modules/meteor/autoupdate/autoupdate_cordova.js\");\n\n/* Exports */\nPackage._define(\"autoupdate\", exports, {\n  Autoupdate: Autoupdate\n});\n\n})();\n","servePath":"/packages/autoupdate.js","sourceMap":{"version":3,"sources":["packages/autoupdate/autoupdate_cordova.js","packages/autoupdate/client_versions.js"],"names":["module","export","Autoupdate","ClientVersions","link","v","autoupdateVersionsCordova","__meteor_runtime_config__","autoupdate","versions","version","clientVersions","Meteor","connection","registerStore","createStore","newClientAvailable","retry","Retry","minCount","baseTimeout","failures","_retrySubscription","appId","subscribe","onError","error","console","log","retryLater","onReady","Package","reload","checkNewVersionDocument","doc","newVersionAvailable","watch","filter","startup","WebAppLocalServer","onNewVersionReady","Reload","_reload","checkForUpdates","_objectSpread","default","Tracker","_versions","Map","_watchCallbacks","Set","update","id","msg","fields","set","hasVersions","size","get","isNew","Object","assign","_id","forEach","fn","skipInitial","resolved","Promise","resolve","then","callback","add","delete","currentVersion","isNewVersion","some","field","dependency","Dependency","depend","stop","changed"],"mappings":"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","file":"/packages/autoupdate.js","sourcesContent":["import { ClientVersions } from \"./client_versions.js\";\n\nvar autoupdateVersionsCordova =\n  __meteor_runtime_config__.autoupdate.versions[\"web.cordova\"] || {\n    version: \"unknown\"\n  };\n\nexport const Autoupdate = {};\n\n// Stores acceptable client versions.\nconst clientVersions = new ClientVersions();\n\nMeteor.connection.registerStore(\n  \"meteor_autoupdate_clientVersions\",\n  clientVersions.createStore()\n);\n\nAutoupdate.newClientAvailable = function () {\n  return clientVersions.newClientAvailable(\n    \"web.cordova\",\n    [\"version\"],\n    autoupdateVersionsCordova\n  );\n};\n\nvar retry = new Retry({\n  // Unlike the stream reconnect use of Retry, which we want to be instant\n  // in normal operation, this is a wacky failure. We don't want to retry\n  // right away, we can start slowly.\n  //\n  // A better way than timeconstants here might be to use the knowledge\n  // of when we reconnect to help trigger these retries. Typically, the\n  // server fixing code will result in a restart and reconnect, but\n  // potentially the subscription could have a transient error.\n  minCount: 0, // don't do any immediate retries\n  baseTimeout: 30*1000 // start with 30s\n});\n\nlet failures = 0;\n\nAutoupdate._retrySubscription = () => {\n  const { appId } = __meteor_runtime_config__;\n\n  Meteor.subscribe(\"meteor_autoupdate_clientVersions\", appId, {\n    onError(error) {\n      console.log(\"autoupdate subscription failed:\", error);\n      failures++;\n      retry.retryLater(failures, function() {\n        // Just retry making the subscription, don't reload the whole\n        // page. While reloading would catch more cases (for example,\n        // the server went back a version and is now doing old-style hot\n        // code push), it would also be more prone to reload loops,\n        // which look really bad to the user. Just retrying the\n        // subscription over DDP means it is at least possible to fix by\n        // updating the server.\n        Autoupdate._retrySubscription();\n      });\n    },\n\n    onReady() {\n      if (Package.reload) {\n        function checkNewVersionDocument(doc) {\n          if (doc.version !== autoupdateVersionsCordova.version) {\n            newVersionAvailable();\n          }\n        }\n\n        clientVersions.watch(checkNewVersionDocument, {\n          filter: \"web.cordova\"\n        });\n      }\n    }\n  });\n};\n\nMeteor.startup(() => {\n  WebAppLocalServer.onNewVersionReady(() => {\n    if (Package.reload) {\n      Package.reload.Reload._reload();\n    }\n  });\n\n  Autoupdate._retrySubscription();\n});\n\nfunction newVersionAvailable() {\n  WebAppLocalServer.checkForUpdates();\n}\n","import { Tracker } from \"meteor/tracker\";\n\nexport class ClientVersions {\n  constructor() {\n    this._versions = new Map();\n    this._watchCallbacks = new Set();\n  }\n\n  // Creates a Livedata store for use with `Meteor.connection.registerStore`.\n  // After the store is registered, document updates reported by Livedata are\n  // merged with the documents in this `ClientVersions` instance.\n  createStore() {\n    return {\n      update: ({ id, msg, fields }) => {\n        if (msg === \"added\" || msg === \"changed\") {\n          this.set(id, fields);\n        }\n      }\n    };\n  }\n\n  hasVersions() {\n    return this._versions.size > 0;\n  }\n\n  get(id) {\n    return this._versions.get(id);\n  }\n\n  // Adds or updates a version document and invokes registered callbacks for the\n  // added/updated document. If a document with the given ID already exists, its\n  // fields are merged with `fields`.\n  set(id, fields) {\n    let version = this._versions.get(id);\n    let isNew = false;\n\n    if (version) {\n      Object.assign(version, fields);\n    } else {\n      version = {\n        _id: id,\n        ...fields\n      };\n\n      isNew = true;\n      this._versions.set(id, version);\n    }\n\n    this._watchCallbacks.forEach(({ fn, filter }) => {\n      if (! filter || filter === version._id) {\n        fn(version, isNew);\n      }\n    });\n  }\n\n  // Registers a callback that will be invoked when a version document is added\n  // or changed. Calling the function returned by `watch` removes the callback.\n  // If `skipInitial` is true, the callback isn't be invoked for existing\n  // documents. If `filter` is set, the callback is only invoked for documents\n  // with ID `filter`.\n  watch(fn, { skipInitial, filter } = {}) {\n    if (! skipInitial) {\n      const resolved = Promise.resolve();\n\n      this._versions.forEach((version) => {\n        if (! filter || filter === version._id) {\n          resolved.then(() => fn(version, true));\n        }\n      });\n    }\n\n    const callback = { fn, filter };\n    this._watchCallbacks.add(callback);\n\n    return () => this._watchCallbacks.delete(callback);\n  }\n\n  // A reactive data source for `Autoupdate.newClientAvailable`.\n  newClientAvailable(id, fields, currentVersion) {\n    function isNewVersion(version) {\n      return (\n        version._id === id &&\n        fields.some((field) => version[field] !== currentVersion[field])\n      );\n    }\n\n    const dependency = new Tracker.Dependency();\n    const version = this.get(id);\n\n    dependency.depend();\n\n    const stop = this.watch(\n      (version) => {\n        if (isNewVersion(version)) {\n          dependency.changed();\n          stop();\n        }\n      },\n      { skipInitial: true }\n    );\n\n    return !! version && isNewVersion(version);\n  }\n}\n"]}}]