{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"C:\\Users\\Haseeb\\Desktop\\Aangan-main\\Aangan-main\\packages\\accounts-ui-unstyled\\login_buttons_single.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser"},"sourceFileName":"packages/accounts-ui-unstyled/login_buttons_single.js","filename":"C:\\Users\\Haseeb\\Desktop\\Aangan-main\\Aangan-main\\packages\\accounts-ui-unstyled\\login_buttons_single.js","targets":{},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"C:\\Users\\Haseeb\\Desktop\\Aangan-main\\Aangan-main","root":"C:\\Users\\Haseeb\\Desktop\\Aangan-main\\Aangan-main","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.13.10","helpers":true,"useESModules":false,"corejs":false}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":{},"_verified":{},"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"C:\\Users\\Haseeb\\Desktop\\Aangan-main\\Aangan-main\\packages\\accounts-ui-unstyled\\login_buttons_single.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/accounts-ui-unstyled/login_buttons_single.js"}},"code":"let getLoginServices;\nmodule.link(\"./login_buttons.js\", {\n  getLoginServices(v) {\n    getLoginServices = v;\n  }\n\n}, 0);\n// for convenience\nconst loginButtonsSession = Accounts._loginButtonsSession;\n\nconst loginResultCallback = (serviceName, err) => {\n  if (!err) {\n    loginButtonsSession.closeDropdown();\n  } else if (err instanceof Accounts.LoginCancelledError) {// do nothing\n  } else if (err instanceof ServiceConfiguration.ConfigError) {\n    if (Template._configureLoginServiceDialog.templateForService(serviceName)) {\n      loginButtonsSession.configureService(serviceName);\n    } else {\n      loginButtonsSession.errorMessage(\"No configuration for \".concat(capitalize(serviceName), \".\\n\") + \"Use `ServiceConfiguration` to configure it or \" + \"install the `\".concat(serviceName, \"-config-ui` package.\"));\n    }\n  } else {\n    loginButtonsSession.errorMessage(err.reason || \"Unknown error\");\n  }\n}; // In the login redirect flow, we'll have the result of the login\n// attempt at page load time when we're redirected back to the\n// application.  Register a callback to update the UI (i.e. to close\n// the dialog on a successful login or display the error on a failed\n// login).\n//\n\n\nAccounts.onPageLoadLogin(attemptInfo => {\n  // Ignore if we have a left over login attempt for a service that is no longer registered.\n  if (getLoginServices().map(service => service.name).includes(attemptInfo.type)) loginResultCallback(attemptInfo.type, attemptInfo.error);\n});\n\nTemplate._loginButtonsLoggedOutSingleLoginButton.events({\n  'click .login-button': function () {\n    const serviceName = this.name;\n    loginButtonsSession.resetMessages(); // XXX Service providers should be able to specify their\n    // `Meteor.loginWithX` method name.\n\n    const loginWithService = Meteor[\"loginWith\".concat(serviceName === 'meteor-developer' ? 'MeteorDeveloperAccount' : capitalize(serviceName))];\n    const options = {}; // use default scope unless specified\n\n    if (Accounts.ui._options.requestPermissions[serviceName]) options.requestPermissions = Accounts.ui._options.requestPermissions[serviceName];\n    if (Accounts.ui._options.requestOfflineToken[serviceName]) options.requestOfflineToken = Accounts.ui._options.requestOfflineToken[serviceName];\n    if (Accounts.ui._options.forceApprovalPrompt[serviceName]) options.forceApprovalPrompt = Accounts.ui._options.forceApprovalPrompt[serviceName];\n    loginWithService(options, err => {\n      loginResultCallback(serviceName, err);\n    });\n  }\n});\n\nTemplate._loginButtonsLoggedOutSingleLoginButton.helpers({\n  // not configured and has no config UI\n  cannotConfigure: function () {\n    return !ServiceConfiguration.configurations.findOne({\n      service: this.name\n    }) && !Template._configureLoginServiceDialog.templateForService(this.name);\n  },\n  configured: function () {\n    return !!ServiceConfiguration.configurations.findOne({\n      service: this.name\n    });\n  },\n  capitalizedName: function () {\n    if (this.name === 'github') // XXX we should allow service packages to set their capitalized name\n      return 'GitHub';else if (this.name === 'meteor-developer') return 'Meteor';else return capitalize(this.name);\n  }\n}); // XXX from http://epeli.github.com/underscore.string/lib/underscore.string.js\n\n\nconst capitalize = input => {\n  str = input == null ? '' : String(input);\n  return str.charAt(0).toUpperCase() + str.slice(1);\n};","map":{"version":3,"sources":["packages/accounts-ui-unstyled/login_buttons_single.js"],"names":["getLoginServices","module","link","v","loginButtonsSession","Accounts","_loginButtonsSession","loginResultCallback","serviceName","err","closeDropdown","LoginCancelledError","ServiceConfiguration","ConfigError","Template","_configureLoginServiceDialog","templateForService","configureService","errorMessage","capitalize","reason","onPageLoadLogin","attemptInfo","map","service","name","includes","type","error","_loginButtonsLoggedOutSingleLoginButton","events","resetMessages","loginWithService","Meteor","options","ui","_options","requestPermissions","requestOfflineToken","forceApprovalPrompt","helpers","cannotConfigure","configurations","findOne","configured","capitalizedName","input","str","String","charAt","toUpperCase","slice"],"mappings":"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","sourcesContent":["import { getLoginServices } from './login_buttons.js';\n\n// for convenience\nconst loginButtonsSession = Accounts._loginButtonsSession;\n\n\nconst loginResultCallback = (serviceName, err) => {\n  if (!err) {\n    loginButtonsSession.closeDropdown();\n  } else if (err instanceof Accounts.LoginCancelledError) {\n    // do nothing\n  } else if (err instanceof ServiceConfiguration.ConfigError) {\n    if (Template._configureLoginServiceDialog.templateForService(serviceName)) {\n      loginButtonsSession.configureService(serviceName);\n    } else {\n      loginButtonsSession.errorMessage(\n        `No configuration for ${capitalize(serviceName)}.\\n` +\n        \"Use `ServiceConfiguration` to configure it or \" +\n        `install the \\`${serviceName}-config-ui\\` package.`\n      );\n    }\n  } else {\n    loginButtonsSession.errorMessage(err.reason || \"Unknown error\");\n  }\n};\n\n\n// In the login redirect flow, we'll have the result of the login\n// attempt at page load time when we're redirected back to the\n// application.  Register a callback to update the UI (i.e. to close\n// the dialog on a successful login or display the error on a failed\n// login).\n//\nAccounts.onPageLoadLogin(attemptInfo => {\n  // Ignore if we have a left over login attempt for a service that is no longer registered.\n  if (\n    getLoginServices()\n      .map(service => service.name)\n      .includes(attemptInfo.type)\n  )\n    loginResultCallback(attemptInfo.type, attemptInfo.error);\n});\n\n\nTemplate._loginButtonsLoggedOutSingleLoginButton.events({\n  'click .login-button': function () {\n    const serviceName = this.name;\n    loginButtonsSession.resetMessages();\n\n    // XXX Service providers should be able to specify their\n    // `Meteor.loginWithX` method name.\n    const loginWithService = Meteor[`loginWith${\n                                  (serviceName === 'meteor-developer' ?\n                                   'MeteorDeveloperAccount' :\n                                   capitalize(serviceName))}`];\n\n    const options = {}; // use default scope unless specified\n    if (Accounts.ui._options.requestPermissions[serviceName])\n      options.requestPermissions = Accounts.ui._options.requestPermissions[serviceName];\n    if (Accounts.ui._options.requestOfflineToken[serviceName])\n      options.requestOfflineToken = Accounts.ui._options.requestOfflineToken[serviceName];\n    if (Accounts.ui._options.forceApprovalPrompt[serviceName])\n      options.forceApprovalPrompt = Accounts.ui._options.forceApprovalPrompt[serviceName];\n\n    loginWithService(options, err => {\n      loginResultCallback(serviceName, err);\n    });\n  }\n});\n\nTemplate._loginButtonsLoggedOutSingleLoginButton.helpers({\n  // not configured and has no config UI\n  cannotConfigure: function () { \n    return !ServiceConfiguration.configurations.findOne({service: this.name}) && \n      !Template._configureLoginServiceDialog.templateForService(this.name);\n  },\n  configured: function () {\n    return !!ServiceConfiguration.configurations.findOne({service: this.name});\n  },\n  capitalizedName: function () {\n    if (this.name === 'github')\n      // XXX we should allow service packages to set their capitalized name\n      return 'GitHub';\n    else if (this.name === 'meteor-developer')\n      return 'Meteor';\n    else\n      return capitalize(this.name);\n  }\n});\n\n// XXX from http://epeli.github.com/underscore.string/lib/underscore.string.js\nconst capitalize = input => {\n  str = input == null ? '' : String(input);\n  return str.charAt(0).toUpperCase() + str.slice(1);\n};\n"]},"sourceType":"module","hash":"e3bd4b42efcef9878dd9ba10f9f827b209966614"}
