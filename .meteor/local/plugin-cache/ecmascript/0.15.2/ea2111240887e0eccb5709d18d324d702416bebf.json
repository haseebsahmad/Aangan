{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"C:\\Users\\Haseeb\\Desktop\\firstReact\\myapp\\packages\\accounts-ui-unstyled\\login_buttons_session.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser"},"sourceFileName":"packages/accounts-ui-unstyled/login_buttons_session.js","filename":"C:\\Users\\Haseeb\\Desktop\\firstReact\\myapp\\packages\\accounts-ui-unstyled\\login_buttons_session.js","targets":{},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"C:\\Users\\Haseeb\\Desktop\\firstReact\\myapp","root":"C:\\Users\\Haseeb\\Desktop\\firstReact\\myapp","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.14.0","helpers":true,"useESModules":false,"corejs":false}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"C:\\Users\\Haseeb\\Desktop\\firstReact\\myapp\\packages\\accounts-ui-unstyled\\login_buttons_session.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/accounts-ui-unstyled/login_buttons_session.js"}},"code":"const VALID_KEYS = ['dropdownVisible', // XXX consider replacing these with one key that has an enum for values.\n'inSignupFlow', 'inForgotPasswordFlow', 'inChangePasswordFlow', 'inMessageOnlyFlow', 'errorMessage', 'infoMessage', // dialogs with messages (info and error)\n'resetPasswordToken', 'enrollAccountToken', 'justVerifiedEmail', 'justResetPassword', 'configureLoginServiceDialogVisible', 'configureLoginServiceDialogServiceName', 'configureLoginServiceDialogSaveDisabled', 'configureOnDesktopVisible'];\n\nconst validateKey = key => {\n  if (!VALID_KEYS.includes(key)) throw new Error(\"Invalid key in loginButtonsSession: \".concat(key));\n};\n\nconst KEY_PREFIX = \"Meteor.loginButtons.\"; // XXX This should probably be package scope rather than exported\n// (there was even a comment to that effect here from before we had\n// namespacing) but accounts-ui-viewer uses it, so leave it as is for\n// now\n\nconst set = (key, value) => {\n  validateKey(key);\n  if (['errorMessage', 'infoMessage'].includes(key)) throw new Error(\"Don't set errorMessage or infoMessage directly. Instead, use errorMessage() or infoMessage().\");\n\n  _set(key, value);\n};\n\nconst _set = (key, value) => Session.set(KEY_PREFIX + key, value);\n\nconst get = key => {\n  validateKey(key);\n  return Session.get(KEY_PREFIX + key);\n};\n\nconst closeDropdown = () => {\n  set('inSignupFlow', false);\n  set('inForgotPasswordFlow', false);\n  set('inChangePasswordFlow', false);\n  set('inMessageOnlyFlow', false);\n  set('dropdownVisible', false);\n  resetMessages();\n};\n\nconst infoMessage = message => {\n  _set(\"errorMessage\", null);\n\n  _set(\"infoMessage\", message);\n\n  ensureMessageVisible();\n};\n\nconst errorMessage = message => {\n  _set(\"errorMessage\", message);\n\n  _set(\"infoMessage\", null);\n\n  ensureMessageVisible();\n}; // is there a visible dialog that shows messages (info and error)\n\n\nconst isMessageDialogVisible = () => {\n  return get('resetPasswordToken') || get('enrollAccountToken') || get('justVerifiedEmail');\n}; // ensure that somethings displaying a message (info or error) is\n// visible. If a dialog with messages is open, do nothing;\n// otherwise open the dropdown.\n//\n// Notably this doesn't matter when only displaying a single login\n// button since then we have an explicit message dialog\n// (_loginButtonsMessageDialog), and dropdownVisible is ignored in\n// this case.\n\n\nconst ensureMessageVisible = () => {\n  if (!isMessageDialogVisible()) set(\"dropdownVisible\", true);\n};\n\nconst resetMessages = () => {\n  _set(\"errorMessage\", null);\n\n  _set(\"infoMessage\", null);\n};\n\nconst configureService = name => {\n  if (Meteor.isCordova) {\n    set('configureOnDesktopVisible', true);\n  } else {\n    set('configureLoginServiceDialogVisible', true);\n    set('configureLoginServiceDialogServiceName', name);\n    set('configureLoginServiceDialogSaveDisabled', true);\n  }\n};\n\nAccounts._loginButtonsSession = {\n  set,\n  _set,\n  get,\n  closeDropdown,\n  infoMessage,\n  errorMessage,\n  isMessageDialogVisible,\n  ensureMessageVisible,\n  resetMessages,\n  configureService\n};","map":{"version":3,"sources":["packages/accounts-ui-unstyled/login_buttons_session.js"],"names":["VALID_KEYS","validateKey","key","includes","Error","KEY_PREFIX","set","value","_set","Session","get","closeDropdown","resetMessages","infoMessage","message","ensureMessageVisible","errorMessage","isMessageDialogVisible","configureService","name","Meteor","isCordova","Accounts","_loginButtonsSession"],"mappings":"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","sourcesContent":["const VALID_KEYS = [\n  'dropdownVisible',\n\n  // XXX consider replacing these with one key that has an enum for values.\n  'inSignupFlow',\n  'inForgotPasswordFlow',\n  'inChangePasswordFlow',\n  'inMessageOnlyFlow',\n\n  'errorMessage',\n  'infoMessage',\n\n  // dialogs with messages (info and error)\n  'resetPasswordToken',\n  'enrollAccountToken',\n  'justVerifiedEmail',\n  'justResetPassword',\n\n  'configureLoginServiceDialogVisible',\n  'configureLoginServiceDialogServiceName',\n  'configureLoginServiceDialogSaveDisabled',\n  'configureOnDesktopVisible',\n];\n\nconst validateKey = key => {\n  if (!VALID_KEYS.includes(key))\n    throw new Error(`Invalid key in loginButtonsSession: ${key}`);\n};\n\nconst KEY_PREFIX = \"Meteor.loginButtons.\";\n\n// XXX This should probably be package scope rather than exported\n// (there was even a comment to that effect here from before we had\n// namespacing) but accounts-ui-viewer uses it, so leave it as is for\n// now\nconst set = (key, value) => {\n  validateKey(key);\n  if (['errorMessage', 'infoMessage'].includes(key))\n    throw new Error(\"Don't set errorMessage or infoMessage directly. Instead, use errorMessage() or infoMessage().\");\n\n  _set(key, value);\n};\n\nconst _set = (key, value) => Session.set(KEY_PREFIX + key, value);\n\nconst get = key => {\n  validateKey(key);\n  return Session.get(KEY_PREFIX + key);\n};\n\nconst closeDropdown = () => {\n  set('inSignupFlow', false);\n  set('inForgotPasswordFlow', false);\n  set('inChangePasswordFlow', false);\n  set('inMessageOnlyFlow', false);\n  set('dropdownVisible', false);\n  resetMessages();\n};\n\nconst infoMessage = message => {\n  _set(\"errorMessage\", null);\n  _set(\"infoMessage\", message);\n  ensureMessageVisible();\n};\n\nconst errorMessage = message => {\n  _set(\"errorMessage\", message);\n  _set(\"infoMessage\", null);\n  ensureMessageVisible();\n};\n\n// is there a visible dialog that shows messages (info and error)\nconst isMessageDialogVisible = () => {\n  return get('resetPasswordToken') ||\n    get('enrollAccountToken') ||\n    get('justVerifiedEmail');\n};\n\n// ensure that somethings displaying a message (info or error) is\n// visible. If a dialog with messages is open, do nothing;\n// otherwise open the dropdown.\n//\n// Notably this doesn't matter when only displaying a single login\n// button since then we have an explicit message dialog\n// (_loginButtonsMessageDialog), and dropdownVisible is ignored in\n// this case.\nconst ensureMessageVisible = () => {\n  if (!isMessageDialogVisible())\n    set(\"dropdownVisible\", true);\n};\n\nconst resetMessages = () => {\n  _set(\"errorMessage\", null);\n  _set(\"infoMessage\", null);\n};\n\nconst configureService = name => {\n  if (Meteor.isCordova) {\n    set('configureOnDesktopVisible', true);\n  } else {\n    set('configureLoginServiceDialogVisible', true);\n    set('configureLoginServiceDialogServiceName', name);\n    set('configureLoginServiceDialogSaveDisabled', true);\n  }\n};\n\nAccounts._loginButtonsSession = {\n  set,\n  _set,\n  get,\n  closeDropdown,\n  infoMessage,\n  errorMessage,\n  isMessageDialogVisible,\n  ensureMessageVisible,\n  resetMessages,\n  configureService,\n};\n"]},"sourceType":"module","hash":"ea2111240887e0eccb5709d18d324d702416bebf"}
