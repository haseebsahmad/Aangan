{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"C:\\Users\\Haseeb\\Desktop\\firstReact\\myapp\\packages\\alanning:roles\\roles\\roles_server.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.windows.x86_64"},"sourceFileName":"packages/alanning:roles/roles/roles_server.js","filename":"C:\\Users\\Haseeb\\Desktop\\firstReact\\myapp\\packages\\alanning:roles\\roles\\roles_server.js","targets":{},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"C:\\Users\\Haseeb\\Desktop\\firstReact\\myapp","root":"C:\\Users\\Haseeb\\Desktop\\firstReact\\myapp","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.15.3","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"C:\\Users\\Haseeb\\Desktop\\firstReact\\myapp\\packages\\alanning:roles\\roles\\roles_server.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/alanning:roles/roles/roles_server.js"}},"code":"/* global Meteor, Roles */\nif (Meteor.roles.createIndex) {\n  Meteor.roleAssignment.createIndex({\n    'user._id': 1,\n    'inheritedRoles._id': 1,\n    scope: 1\n  });\n  Meteor.roleAssignment.createIndex({\n    'user._id': 1,\n    'role._id': 1,\n    scope: 1\n  });\n  Meteor.roleAssignment.createIndex({\n    'role._id': 1\n  });\n  Meteor.roleAssignment.createIndex({\n    scope: 1,\n    'user._id': 1,\n    'inheritedRoles._id': 1\n  }); // Adding userId and roleId might speed up other queries depending on the first index\n\n  Meteor.roleAssignment.createIndex({\n    'inheritedRoles._id': 1\n  });\n  Meteor.roles.createIndex({\n    'children._id': 1\n  });\n} else {\n  Meteor.roleAssignment._ensureIndex({\n    'user._id': 1,\n    'inheritedRoles._id': 1,\n    scope: 1\n  });\n\n  Meteor.roleAssignment._ensureIndex({\n    'user._id': 1,\n    'role._id': 1,\n    scope: 1\n  });\n\n  Meteor.roleAssignment._ensureIndex({\n    'role._id': 1\n  });\n\n  Meteor.roleAssignment._ensureIndex({\n    scope: 1,\n    'user._id': 1,\n    'inheritedRoles._id': 1\n  }); // Adding userId and roleId might speed up other queries depending on the first index\n\n\n  Meteor.roleAssignment._ensureIndex({\n    'inheritedRoles._id': 1\n  });\n\n  Meteor.roles._ensureIndex({\n    'children._id': 1\n  });\n}\n/*\n * Publish logged-in user's roles so client-side checks can work.\n *\n * Use a named publish function so clients can check `ready()` state.\n */\n\n\nMeteor.publish('_roles', function () {\n  var loggedInUserId = this.userId;\n  var fields = {\n    roles: 1\n  };\n\n  if (!loggedInUserId) {\n    this.ready();\n    return;\n  }\n\n  return Meteor.users.find({\n    _id: loggedInUserId\n  }, {\n    fields: fields\n  });\n});\nObject.assign(Roles, {\n  /**\n   * @method _isNewRole\n   * @param {Object} role `Meteor.roles` document.\n   * @return {Boolean} Returns `true` if the `role` is in the new format.\n   *                   If it is ambiguous or it is not, returns `false`.\n   * @for Roles\n   * @private\n   * @static\n   */\n  _isNewRole: function (role) {\n    return !('name' in role) && 'children' in role;\n  },\n\n  /**\n   * @method _isOldRole\n   * @param {Object} role `Meteor.roles` document.\n   * @return {Boolean} Returns `true` if the `role` is in the old format.\n   *                   If it is ambiguous or it is not, returns `false`.\n   * @for Roles\n   * @private\n   * @static\n   */\n  _isOldRole: function (role) {\n    return 'name' in role && !('children' in role);\n  },\n\n  /**\n   * @method _isNewField\n   * @param {Array} roles `Meteor.users` document `roles` field.\n   * @return {Boolean} Returns `true` if the `roles` field is in the new format.\n   *                   If it is ambiguous or it is not, returns `false`.\n   * @for Roles\n   * @private\n   * @static\n   */\n  _isNewField: function (roles) {\n    return Array.isArray(roles) && typeof roles[0] === 'object';\n  },\n\n  /**\n   * @method _isOldField\n   * @param {Array} roles `Meteor.users` document `roles` field.\n   * @return {Boolean} Returns `true` if the `roles` field is in the old format.\n   *                   If it is ambiguous or it is not, returns `false`.\n   * @for Roles\n   * @private\n   * @static\n   */\n  _isOldField: function (roles) {\n    return Array.isArray(roles) && typeof roles[0] === 'string' || typeof roles === 'object' && !Array.isArray(roles);\n  },\n\n  /**\n   * @method _convertToNewRole\n   * @param {Object} oldRole `Meteor.roles` document.\n   * @return {Object} Converted `role` to the new format.\n   * @for Roles\n   * @private\n   * @static\n   */\n  _convertToNewRole: function (oldRole) {\n    if (!(typeof oldRole.name === 'string')) throw new Error(\"Role name '\" + oldRole.name + \"' is not a string.\");\n    return {\n      _id: oldRole.name,\n      children: []\n    };\n  },\n\n  /**\n   * @method _convertToOldRole\n   * @param {Object} newRole `Meteor.roles` document.\n   * @return {Object} Converted `role` to the old format.\n   * @for Roles\n   * @private\n   * @static\n   */\n  _convertToOldRole: function (newRole) {\n    if (!(typeof newRole._id === 'string')) throw new Error(\"Role name '\" + newRole._id + \"' is not a string.\");\n    return {\n      name: newRole._id\n    };\n  },\n\n  /**\n   * @method _convertToNewField\n   * @param {Array} oldRoles `Meteor.users` document `roles` field in the old format.\n   * @param {Boolean} convertUnderscoresToDots Should we convert underscores to dots in group names.\n   * @return {Array} Converted `roles` to the new format.\n   * @for Roles\n   * @private\n   * @static\n   */\n  _convertToNewField: function (oldRoles, convertUnderscoresToDots) {\n    var roles = [];\n\n    if (Array.isArray(oldRoles)) {\n      oldRoles.forEach(function (role, index) {\n        if (!(typeof role === 'string')) throw new Error(\"Role '\" + role + \"' is not a string.\");\n        roles.push({\n          _id: role,\n          scope: null,\n          assigned: true\n        });\n      });\n    } else if (typeof oldRoles === 'object') {\n      Object.entries(oldRoles).forEach(_ref => {\n        let [group, rolesArray] = _ref;\n\n        if (group === '__global_roles__') {\n          group = null;\n        } else if (convertUnderscoresToDots) {\n          // unescape\n          group = group.replace(/_/g, '.');\n        }\n\n        rolesArray.forEach(function (role) {\n          if (!(typeof role === 'string')) throw new Error(\"Role '\" + role + \"' is not a string.\");\n          roles.push({\n            _id: role,\n            scope: group,\n            assigned: true\n          });\n        });\n      });\n    }\n\n    return roles;\n  },\n\n  /**\n   * @method _convertToOldField\n   * @param {Array} newRoles `Meteor.users` document `roles` field in the new format.\n   * @param {Boolean} usingGroups Should we use groups or not.\n   * @return {Array} Converted `roles` to the old format.\n   * @for Roles\n   * @private\n   * @static\n   */\n  _convertToOldField: function (newRoles, usingGroups) {\n    var roles;\n\n    if (usingGroups) {\n      roles = {};\n    } else {\n      roles = [];\n    }\n\n    newRoles.forEach(function (userRole) {\n      if (!(typeof userRole === 'object')) throw new Error(\"Role '\" + userRole + \"' is not an object.\"); // We assume that we are converting back a failed migration, so values can only be\n      // what were valid values in 1.0. So no group names starting with $ and no subroles.\n\n      if (userRole.scope) {\n        if (!usingGroups) throw new Error(\"Role '\" + userRole._id + \"' with scope '\" + userRole.scope + \"' without enabled groups.\"); // escape\n\n        var scope = userRole.scope.replace(/\\./g, '_');\n        if (scope[0] === '$') throw new Error(\"Group name '\" + scope + \"' start with $.\");\n        roles[scope] = roles[scope] || [];\n        roles[scope].push(userRole._id);\n      } else {\n        if (usingGroups) {\n          roles.__global_roles__ = roles.__global_roles__ || [];\n\n          roles.__global_roles__.push(userRole._id);\n        } else {\n          roles.push(userRole._id);\n        }\n      }\n    });\n    return roles;\n  },\n\n  /**\n   * @method _defaultUpdateUser\n   * @param {Object} user `Meteor.users` document.\n   * @param {Array|Object} roles Value to which user's `roles` field should be set.\n   * @for Roles\n   * @private\n   * @static\n   */\n  _defaultUpdateUser: function (user, roles) {\n    Meteor.users.update({\n      _id: user._id,\n      // making sure nothing changed in meantime\n      roles: user.roles\n    }, {\n      $set: {\n        roles\n      }\n    });\n  },\n\n  /**\n   * @method _defaultUpdateRole\n   * @param {Object} oldRole Old `Meteor.roles` document.\n   * @param {Object} newRole New `Meteor.roles` document.\n   * @for Roles\n   * @private\n   * @static\n   */\n  _defaultUpdateRole: function (oldRole, newRole) {\n    Meteor.roles.remove(oldRole._id);\n    Meteor.roles.insert(newRole);\n  },\n\n  /**\n   * @method _dropCollectionIndex\n   * @param {Object} collection Collection on which to drop the index.\n   * @param {String} indexName Name of the index to drop.\n   * @for Roles\n   * @private\n   * @static\n   */\n  _dropCollectionIndex: function (collection, indexName) {\n    try {\n      collection._dropIndex(indexName);\n    } catch (e) {\n      if (e.name !== 'MongoError') throw e;\n      if (!/index not found/.test(e.err || e.errmsg)) throw e;\n    }\n  },\n\n  /**\n   * Migrates `Meteor.users` and `Meteor.roles` to the new format.\n   *\n   * @method _forwardMigrate\n   * @param {Function} updateUser Function which updates the user object. Default `_defaultUpdateUser`.\n   * @param {Function} updateRole Function which updates the role object. Default `_defaultUpdateRole`.\n   * @param {Boolean} convertUnderscoresToDots Should we convert underscores to dots in group names.\n   * @for Roles\n   * @private\n   * @static\n   */\n  _forwardMigrate: function (updateUser, updateRole, convertUnderscoresToDots) {\n    updateUser = updateUser || Roles._defaultUpdateUser;\n    updateRole = updateRole || Roles._defaultUpdateRole;\n\n    Roles._dropCollectionIndex(Meteor.roles, 'name_1');\n\n    Meteor.roles.find().forEach(function (role, index, cursor) {\n      if (!Roles._isNewRole(role)) {\n        updateRole(role, Roles._convertToNewRole(role));\n      }\n    });\n    Meteor.users.find().forEach(function (user, index, cursor) {\n      if (!Roles._isNewField(user.roles)) {\n        updateUser(user, Roles._convertToNewField(user.roles, convertUnderscoresToDots));\n      }\n    });\n  },\n\n  /**\n   * Moves the assignments from `Meteor.users` to `Meteor.roleAssignment`.\n   *\n   * @method _forwardMigrate2\n   * @param {Object} userSelector An opportunity to share the work among instances. It's advisable to do the division based on user-id.\n   * @for Roles\n   * @private\n   * @static\n   */\n  _forwardMigrate2: function (userSelector) {\n    userSelector = userSelector || {};\n    Object.assign(userSelector, {\n      roles: {\n        $ne: null\n      }\n    });\n    Meteor.users.find(userSelector).forEach(function (user, index) {\n      user.roles.filter(r => r.assigned).forEach(r => {\n        // Added `ifExists` to make it less error-prone\n        Roles._addUserToRole(user._id, r._id, {\n          scope: r.scope,\n          ifExists: true\n        });\n      });\n      Meteor.users.update({\n        _id: user._id\n      }, {\n        $unset: {\n          roles: ''\n        }\n      });\n    }); // No need to keep the indexes around\n\n    Roles._dropCollectionIndex(Meteor.users, 'roles._id_1_roles.scope_1');\n\n    Roles._dropCollectionIndex(Meteor.users, 'roles.scope_1');\n  },\n\n  /**\n   * Migrates `Meteor.users` and `Meteor.roles` to the old format.\n   *\n   * We assume that we are converting back a failed migration, so values can only be\n   * what were valid values in the old format. So no group names starting with `$` and\n   * no subroles.\n   *\n   * @method _backwardMigrate\n   * @param {Function} updateUser Function which updates the user object. Default `_defaultUpdateUser`.\n   * @param {Function} updateRole Function which updates the role object. Default `_defaultUpdateRole`.\n   * @param {Boolean} usingGroups Should we use groups or not.\n   * @for Roles\n   * @private\n   * @static\n   */\n  _backwardMigrate: function (updateUser, updateRole, usingGroups) {\n    updateUser = updateUser || Roles._defaultUpdateUser;\n    updateRole = updateRole || Roles._defaultUpdateRole;\n\n    Roles._dropCollectionIndex(Meteor.users, 'roles._id_1_roles.scope_1');\n\n    Roles._dropCollectionIndex(Meteor.users, 'roles.scope_1');\n\n    Meteor.roles.find().forEach(function (role, index, cursor) {\n      if (!Roles._isOldRole(role)) {\n        updateRole(role, Roles._convertToOldRole(role));\n      }\n    });\n    Meteor.users.find().forEach(function (user, index, cursor) {\n      if (!Roles._isOldField(user.roles)) {\n        updateUser(user, Roles._convertToOldField(user.roles, usingGroups));\n      }\n    });\n  },\n\n  /**\n   * Moves the assignments from `Meteor.roleAssignment` back to to `Meteor.users`.\n   *\n   * @method _backwardMigrate2\n   * @param {Object} assignmentSelector An opportunity to share the work among instances. It's advisable to do the division based on user-id.\n   * @for Roles\n   * @private\n   * @static\n   */\n  _backwardMigrate2: function (assignmentSelector) {\n    assignmentSelector = assignmentSelector || {};\n\n    if (Meteor.users.createIndex) {\n      Meteor.users.createIndex({\n        'roles._id': 1,\n        'roles.scope': 1\n      });\n      Meteor.users.createIndex({\n        'roles.scope': 1\n      });\n    } else {\n      Meteor.users._ensureIndex({\n        'roles._id': 1,\n        'roles.scope': 1\n      });\n\n      Meteor.users._ensureIndex({\n        'roles.scope': 1\n      });\n    }\n\n    Meteor.roleAssignment.find(assignmentSelector).forEach(r => {\n      const roles = Meteor.users.findOne({\n        _id: r.user._id\n      }).roles || [];\n      const currentRole = roles.find(oldRole => oldRole._id === r.role._id && oldRole.scope === r.scope);\n\n      if (currentRole) {\n        currentRole.assigned = true;\n      } else {\n        roles.push({\n          _id: r.role._id,\n          scope: r.scope,\n          assigned: true\n        });\n        r.inheritedRoles.forEach(inheritedRole => {\n          const currentInheritedRole = roles.find(oldRole => oldRole._id === inheritedRole._id && oldRole.scope === r.scope);\n\n          if (!currentInheritedRole) {\n            roles.push({\n              _id: inheritedRole._id,\n              scope: r.scope,\n              assigned: false\n            });\n          }\n        });\n      }\n\n      Meteor.users.update({\n        _id: r.user._id\n      }, {\n        $set: {\n          roles\n        }\n      });\n      Meteor.roleAssignment.remove({\n        _id: r._id\n      });\n    });\n  }\n});","map":{"version":3,"sources":["packages/alanning:roles/roles/roles_server.js"],"names":["Meteor","roles","createIndex","roleAssignment","scope","_ensureIndex","publish","loggedInUserId","userId","fields","ready","users","find","_id","Object","assign","Roles","_isNewRole","role","_isOldRole","_isNewField","Array","isArray","_isOldField","_convertToNewRole","oldRole","name","Error","children","_convertToOldRole","newRole","_convertToNewField","oldRoles","convertUnderscoresToDots","forEach","index","push","assigned","entries","group","rolesArray","replace","_convertToOldField","newRoles","usingGroups","userRole","__global_roles__","_defaultUpdateUser","user","update","$set","_defaultUpdateRole","remove","insert","_dropCollectionIndex","collection","indexName","_dropIndex","e","test","err","errmsg","_forwardMigrate","updateUser","updateRole","cursor","_forwardMigrate2","userSelector","$ne","filter","r","_addUserToRole","ifExists","$unset","_backwardMigrate","_backwardMigrate2","assignmentSelector","findOne","currentRole","inheritedRoles","inheritedRole","currentInheritedRole"],"mappings":"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","sourcesContent":["/* global Meteor, Roles */\nif (Meteor.roles.createIndex) {\n  Meteor.roleAssignment.createIndex({ 'user._id': 1, 'inheritedRoles._id': 1, scope: 1 })\n  Meteor.roleAssignment.createIndex({ 'user._id': 1, 'role._id': 1, scope: 1 })\n  Meteor.roleAssignment.createIndex({ 'role._id': 1 })\n  Meteor.roleAssignment.createIndex({ scope: 1, 'user._id': 1, 'inheritedRoles._id': 1 }) // Adding userId and roleId might speed up other queries depending on the first index\n  Meteor.roleAssignment.createIndex({ 'inheritedRoles._id': 1 })\n\n  Meteor.roles.createIndex({ 'children._id': 1 })\n} else {\n  Meteor.roleAssignment._ensureIndex({ 'user._id': 1, 'inheritedRoles._id': 1, scope: 1 })\n  Meteor.roleAssignment._ensureIndex({ 'user._id': 1, 'role._id': 1, scope: 1 })\n  Meteor.roleAssignment._ensureIndex({ 'role._id': 1 })\n  Meteor.roleAssignment._ensureIndex({ scope: 1, 'user._id': 1, 'inheritedRoles._id': 1 }) // Adding userId and roleId might speed up other queries depending on the first index\n  Meteor.roleAssignment._ensureIndex({ 'inheritedRoles._id': 1 })\n\n  Meteor.roles._ensureIndex({ 'children._id': 1 })\n}\n\n/*\n * Publish logged-in user's roles so client-side checks can work.\n *\n * Use a named publish function so clients can check `ready()` state.\n */\nMeteor.publish('_roles', function () {\n  var loggedInUserId = this.userId\n  var fields = { roles: 1 }\n\n  if (!loggedInUserId) {\n    this.ready()\n    return\n  }\n\n  return Meteor.users.find(\n    { _id: loggedInUserId },\n    { fields: fields }\n  )\n})\n\nObject.assign(Roles, {\n  /**\n   * @method _isNewRole\n   * @param {Object} role `Meteor.roles` document.\n   * @return {Boolean} Returns `true` if the `role` is in the new format.\n   *                   If it is ambiguous or it is not, returns `false`.\n   * @for Roles\n   * @private\n   * @static\n   */\n  _isNewRole: function (role) {\n    return !('name' in role) && 'children' in role\n  },\n\n  /**\n   * @method _isOldRole\n   * @param {Object} role `Meteor.roles` document.\n   * @return {Boolean} Returns `true` if the `role` is in the old format.\n   *                   If it is ambiguous or it is not, returns `false`.\n   * @for Roles\n   * @private\n   * @static\n   */\n  _isOldRole: function (role) {\n    return 'name' in role && !('children' in role)\n  },\n\n  /**\n   * @method _isNewField\n   * @param {Array} roles `Meteor.users` document `roles` field.\n   * @return {Boolean} Returns `true` if the `roles` field is in the new format.\n   *                   If it is ambiguous or it is not, returns `false`.\n   * @for Roles\n   * @private\n   * @static\n   */\n  _isNewField: function (roles) {\n    return Array.isArray(roles) && (typeof roles[0] === 'object')\n  },\n\n  /**\n   * @method _isOldField\n   * @param {Array} roles `Meteor.users` document `roles` field.\n   * @return {Boolean} Returns `true` if the `roles` field is in the old format.\n   *                   If it is ambiguous or it is not, returns `false`.\n   * @for Roles\n   * @private\n   * @static\n   */\n  _isOldField: function (roles) {\n    return (Array.isArray(roles) && (typeof roles[0] === 'string')) || ((typeof roles === 'object') && !Array.isArray(roles))\n  },\n\n  /**\n   * @method _convertToNewRole\n   * @param {Object} oldRole `Meteor.roles` document.\n   * @return {Object} Converted `role` to the new format.\n   * @for Roles\n   * @private\n   * @static\n   */\n  _convertToNewRole: function (oldRole) {\n    if (!(typeof oldRole.name === 'string')) throw new Error(\"Role name '\" + oldRole.name + \"' is not a string.\")\n\n    return {\n      _id: oldRole.name,\n      children: []\n    }\n  },\n\n  /**\n   * @method _convertToOldRole\n   * @param {Object} newRole `Meteor.roles` document.\n   * @return {Object} Converted `role` to the old format.\n   * @for Roles\n   * @private\n   * @static\n   */\n  _convertToOldRole: function (newRole) {\n    if (!(typeof newRole._id === 'string')) throw new Error(\"Role name '\" + newRole._id + \"' is not a string.\")\n\n    return {\n      name: newRole._id\n    }\n  },\n\n  /**\n   * @method _convertToNewField\n   * @param {Array} oldRoles `Meteor.users` document `roles` field in the old format.\n   * @param {Boolean} convertUnderscoresToDots Should we convert underscores to dots in group names.\n   * @return {Array} Converted `roles` to the new format.\n   * @for Roles\n   * @private\n   * @static\n   */\n  _convertToNewField: function (oldRoles, convertUnderscoresToDots) {\n    var roles = []\n    if (Array.isArray(oldRoles)) {\n      oldRoles.forEach(function (role, index) {\n        if (!(typeof role === 'string')) throw new Error(\"Role '\" + role + \"' is not a string.\")\n\n        roles.push({\n          _id: role,\n          scope: null,\n          assigned: true\n        })\n      })\n    } else if (typeof oldRoles === 'object') {\n      Object.entries(oldRoles).forEach(([group, rolesArray]) => {\n        if (group === '__global_roles__') {\n          group = null\n        } else if (convertUnderscoresToDots) {\n          // unescape\n          group = group.replace(/_/g, '.')\n        }\n\n        rolesArray.forEach(function (role) {\n          if (!(typeof role === 'string')) throw new Error(\"Role '\" + role + \"' is not a string.\")\n\n          roles.push({\n            _id: role,\n            scope: group,\n            assigned: true\n          })\n        })\n      })\n    }\n    return roles\n  },\n\n  /**\n   * @method _convertToOldField\n   * @param {Array} newRoles `Meteor.users` document `roles` field in the new format.\n   * @param {Boolean} usingGroups Should we use groups or not.\n   * @return {Array} Converted `roles` to the old format.\n   * @for Roles\n   * @private\n   * @static\n   */\n  _convertToOldField: function (newRoles, usingGroups) {\n    var roles\n\n    if (usingGroups) {\n      roles = {}\n    } else {\n      roles = []\n    }\n\n    newRoles.forEach(function (userRole) {\n      if (!(typeof userRole === 'object')) throw new Error(\"Role '\" + userRole + \"' is not an object.\")\n\n      // We assume that we are converting back a failed migration, so values can only be\n      // what were valid values in 1.0. So no group names starting with $ and no subroles.\n\n      if (userRole.scope) {\n        if (!usingGroups) throw new Error(\"Role '\" + userRole._id + \"' with scope '\" + userRole.scope + \"' without enabled groups.\")\n\n        // escape\n        var scope = userRole.scope.replace(/\\./g, '_')\n\n        if (scope[0] === '$') throw new Error(\"Group name '\" + scope + \"' start with $.\")\n\n        roles[scope] = roles[scope] || []\n        roles[scope].push(userRole._id)\n      } else {\n        if (usingGroups) {\n          roles.__global_roles__ = roles.__global_roles__ || []\n          roles.__global_roles__.push(userRole._id)\n        } else {\n          roles.push(userRole._id)\n        }\n      }\n    })\n    return roles\n  },\n\n  /**\n   * @method _defaultUpdateUser\n   * @param {Object} user `Meteor.users` document.\n   * @param {Array|Object} roles Value to which user's `roles` field should be set.\n   * @for Roles\n   * @private\n   * @static\n   */\n  _defaultUpdateUser: function (user, roles) {\n    Meteor.users.update({\n      _id: user._id,\n      // making sure nothing changed in meantime\n      roles: user.roles\n    }, {\n      $set: { roles }\n    })\n  },\n\n  /**\n   * @method _defaultUpdateRole\n   * @param {Object} oldRole Old `Meteor.roles` document.\n   * @param {Object} newRole New `Meteor.roles` document.\n   * @for Roles\n   * @private\n   * @static\n   */\n  _defaultUpdateRole: function (oldRole, newRole) {\n    Meteor.roles.remove(oldRole._id)\n    Meteor.roles.insert(newRole)\n  },\n\n  /**\n   * @method _dropCollectionIndex\n   * @param {Object} collection Collection on which to drop the index.\n   * @param {String} indexName Name of the index to drop.\n   * @for Roles\n   * @private\n   * @static\n   */\n  _dropCollectionIndex: function (collection, indexName) {\n    try {\n      collection._dropIndex(indexName)\n    } catch (e) {\n      if (e.name !== 'MongoError') throw e\n      if (!/index not found/.test(e.err || e.errmsg)) throw e\n    }\n  },\n\n  /**\n   * Migrates `Meteor.users` and `Meteor.roles` to the new format.\n   *\n   * @method _forwardMigrate\n   * @param {Function} updateUser Function which updates the user object. Default `_defaultUpdateUser`.\n   * @param {Function} updateRole Function which updates the role object. Default `_defaultUpdateRole`.\n   * @param {Boolean} convertUnderscoresToDots Should we convert underscores to dots in group names.\n   * @for Roles\n   * @private\n   * @static\n   */\n  _forwardMigrate: function (updateUser, updateRole, convertUnderscoresToDots) {\n    updateUser = updateUser || Roles._defaultUpdateUser\n    updateRole = updateRole || Roles._defaultUpdateRole\n\n    Roles._dropCollectionIndex(Meteor.roles, 'name_1')\n\n    Meteor.roles.find().forEach(function (role, index, cursor) {\n      if (!Roles._isNewRole(role)) {\n        updateRole(role, Roles._convertToNewRole(role))\n      }\n    })\n\n    Meteor.users.find().forEach(function (user, index, cursor) {\n      if (!Roles._isNewField(user.roles)) {\n        updateUser(user, Roles._convertToNewField(user.roles, convertUnderscoresToDots))\n      }\n    })\n  },\n\n  /**\n   * Moves the assignments from `Meteor.users` to `Meteor.roleAssignment`.\n   *\n   * @method _forwardMigrate2\n   * @param {Object} userSelector An opportunity to share the work among instances. It's advisable to do the division based on user-id.\n   * @for Roles\n   * @private\n   * @static\n   */\n  _forwardMigrate2: function (userSelector) {\n    userSelector = userSelector || {}\n    Object.assign(userSelector, { roles: { $ne: null } })\n\n    Meteor.users.find(userSelector).forEach(function (user, index) {\n      user.roles.filter((r) => r.assigned).forEach(r => {\n        // Added `ifExists` to make it less error-prone\n        Roles._addUserToRole(user._id, r._id, { scope: r.scope, ifExists: true })\n      })\n\n      Meteor.users.update({ _id: user._id }, { $unset: { roles: '' } })\n    })\n\n    // No need to keep the indexes around\n    Roles._dropCollectionIndex(Meteor.users, 'roles._id_1_roles.scope_1')\n    Roles._dropCollectionIndex(Meteor.users, 'roles.scope_1')\n  },\n\n  /**\n   * Migrates `Meteor.users` and `Meteor.roles` to the old format.\n   *\n   * We assume that we are converting back a failed migration, so values can only be\n   * what were valid values in the old format. So no group names starting with `$` and\n   * no subroles.\n   *\n   * @method _backwardMigrate\n   * @param {Function} updateUser Function which updates the user object. Default `_defaultUpdateUser`.\n   * @param {Function} updateRole Function which updates the role object. Default `_defaultUpdateRole`.\n   * @param {Boolean} usingGroups Should we use groups or not.\n   * @for Roles\n   * @private\n   * @static\n   */\n  _backwardMigrate: function (updateUser, updateRole, usingGroups) {\n    updateUser = updateUser || Roles._defaultUpdateUser\n    updateRole = updateRole || Roles._defaultUpdateRole\n\n    Roles._dropCollectionIndex(Meteor.users, 'roles._id_1_roles.scope_1')\n    Roles._dropCollectionIndex(Meteor.users, 'roles.scope_1')\n\n    Meteor.roles.find().forEach(function (role, index, cursor) {\n      if (!Roles._isOldRole(role)) {\n        updateRole(role, Roles._convertToOldRole(role))\n      }\n    })\n\n    Meteor.users.find().forEach(function (user, index, cursor) {\n      if (!Roles._isOldField(user.roles)) {\n        updateUser(user, Roles._convertToOldField(user.roles, usingGroups))\n      }\n    })\n  },\n\n  /**\n   * Moves the assignments from `Meteor.roleAssignment` back to to `Meteor.users`.\n   *\n   * @method _backwardMigrate2\n   * @param {Object} assignmentSelector An opportunity to share the work among instances. It's advisable to do the division based on user-id.\n   * @for Roles\n   * @private\n   * @static\n   */\n  _backwardMigrate2: function (assignmentSelector) {\n    assignmentSelector = assignmentSelector || {}\n\n    if (Meteor.users.createIndex) {\n      Meteor.users.createIndex({ 'roles._id': 1, 'roles.scope': 1 })\n      Meteor.users.createIndex({ 'roles.scope': 1 })\n    } else {\n      Meteor.users._ensureIndex({ 'roles._id': 1, 'roles.scope': 1 })\n      Meteor.users._ensureIndex({ 'roles.scope': 1 })\n    }\n\n    Meteor.roleAssignment.find(assignmentSelector).forEach(r => {\n      const roles = Meteor.users.findOne({ _id: r.user._id }).roles || []\n\n      const currentRole = roles.find(oldRole => oldRole._id === r.role._id && oldRole.scope === r.scope)\n      if (currentRole) {\n        currentRole.assigned = true\n      } else {\n        roles.push({\n          _id: r.role._id,\n          scope: r.scope,\n          assigned: true\n        })\n\n        r.inheritedRoles.forEach(inheritedRole => {\n          const currentInheritedRole = roles.find(oldRole => oldRole._id === inheritedRole._id && oldRole.scope === r.scope)\n\n          if (!currentInheritedRole) {\n            roles.push({\n              _id: inheritedRole._id,\n              scope: r.scope,\n              assigned: false\n            })\n          }\n        })\n      }\n\n      Meteor.users.update({ _id: r.user._id }, { $set: { roles } })\n      Meteor.roleAssignment.remove({ _id: r._id })\n    })\n  }\n})\n"]},"sourceType":"module","hash":"48d2ad31433debbe71ce178c915a661bb1d6b0ac"}
